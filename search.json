[
  {
    "objectID": "maintainer.html",
    "href": "maintainer.html",
    "title": "Maintainers",
    "section": "",
    "text": "function sparkbar(max) {\n  const colourScale = d3.scaleSequential(d3.interpolateCool)\n    .domain([0, max]);\n\n  return (x) =&gt; htl.html`&lt;div style=\"\n    background: ${colourScale(x)};\n    color: black;\n    width: ${100 * x / max}%;\n    float: right;\n    padding-right: 3px;\n    box-sizing: border-box;\n    overflow: visible;\n    display: flex;\n    justify-content: end;\"&gt;${x.toFixed(2).toLocaleString(\"en-US\")}`\n}\n\nfunction tooltip(title, expl) {\n    const th = document.createElement(\"th\");\n    th.title = expl\n    th.style.background = \"#f0f8ff\";\n    th.textContent = title;\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    return th;\n}\n\nfunction pkgfmt(pkg) {\n    const th = document.createElement(\"th\");\n    th.title = \"hover\"\n    th.style.background = \"#f0f8ff\";\n    th.textContent = pkg;\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    th.addEventListener(\"click\", () =&gt; {\n        localStorage.setItem(\"orgmetricsRepo\", pkg);\n        th.style.background=\"#a0f8ff\";\n        window.location.href=\"/repometrics-demo/repo.html\";\n    });\n\n    return th;\n}\nrepo_src = {\n    return transpose(repo_src_in).map(row =&gt; ({\n        ...row,\n    }));\n}\njson_data = FileAttachment(\"results-json-data.json\").json();\nmaintainer_pkgs = json_data['maintainer_pkgs'];\ncomaintainers = json_data['comaintainers'];\nmaintainers = Object.keys(maintainer_pkgs);\nmaintainerSet = localStorage.getItem(\"orgmetricsMaintainer\") || maintainers [0]\nviewof maintainer = Inputs.select(\n    maintainers,\n    {\n        multiple: false,\n        value: maintainerSet,\n        label: htl.html`&lt;b&gt;Maintainer:&lt;/b&gt;`\n    }\n)\ns = localStorage.setItem(\"orgmetricsMaintainer\", maintainer.toString());\nthese_pkgs = maintainer_pkgs[maintainer] || null;\n\nthese_cos = comaintainers[maintainer] || null\nthese_cos_list = these_cos ?\nthese_cos.map(i =&gt; htl.html`\n&lt;div onclick=${() =&gt; localStorage.setItem('orgmetricsMaintainer', i)}&gt;\n&lt;li&gt;&lt;a href=\"/repometrics-demo/maintainer.html\"&gt;${i}&lt;/a&gt;&lt;/li&gt;\n&lt;/div&gt;`) : htl.html`&lt;li&gt;No co-maintainers&lt;/li&gt;`;\nhtl.html`&lt;div&gt;&lt;a href=\"https://github.com/${maintainer}\" target=\"_blank\"&gt;github.com/${maintainer}&lt;/a&gt;&lt;/div&gt;`"
  },
  {
    "objectID": "maintainer.html#repositories",
    "href": "maintainer.html#repositories",
    "title": "Maintainers",
    "section": "Repositories",
    "text": "Repositories\nThis is a sub-set of the main table on the Organization page, showing repository metrics aggregated across the four categories described there. Values are shown only for repositories maintained by , and are scaled between 0 and 1 based on the distribution of values across the entire organization, with higher values always better than lower values.\n\n\nmetricsGroupedTable = {\n    return transpose(metrics_table_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmetricsTable = metricsGroupedTable.filter(i =&gt; these_pkgs.includes(i.package));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(metricsTable, {\n    width: {\n        package: 100,\n        total: 200,\n        development: 200,\n        issues: 200,\n        popularity: 200,\n        meta: 200,\n    },\n    format: {\n        package: d =&gt; pkgfmt(d),\n        development: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.development)),\n        issues: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.issues)),\n        popularity: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.popularity)),\n        meta: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.meta)),\n        total: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.total)),\n    },\n    header: {\n        development: tooltip(\"Development\", \"Code development and maintenance metrics\"),\n        issues: tooltip(\"Issues\", \"GitHub issues and pull request activity\"),\n        popularity: tooltip(\"Popularity\", \"Project popularity on CRAN (where applicable) and GitHub\"),\n        meta: tooltip(\"Dependencies and releases\", \"\"),\n        total: tooltip(\"Overall\", \"Average across all four categories of metrics.\"),\n    },\n})"
  },
  {
    "objectID": "maintainer.html#network",
    "href": "maintainer.html#network",
    "title": "Maintainers",
    "section": "Network",
    "text": "Network\n\nco_pkgs = these_cos ? these_cos.map(i =&gt; maintainer_pkgs[i]).flat() : [];\npkgs_expanded_full = [\n    ...these_pkgs,\n    ...co_pkgs\n];\n// Reduce to unique pkgs:\npkgs_expanded = [...new Set(pkgs_expanded_full)];\n\nco_nodes = these_cos ?\n    these_cos.map(item =&gt; ({ id: item, group: \"Co-maintainer\", size: 6 })) : [];\nnodes = [\n    { id: maintainer, group: \"Maintainer\", size: 10 },\n    ...pkgs_expanded.map(item =&gt; ({\n        id: item,\n        group: these_pkgs.includes(item) ? \"packages\" : \"otherPackages\",\n        size: these_pkgs.includes(item) ? 8 : 4,\n    })),\n    ...co_nodes\n];\n\n// edges are mappings from co-maintainers to all packages. First collect list\n// of all packages from co-maintainers:\nthese_co_pkgs = these_cos ? these_cos.reduce((acc, key) =&gt; {\n    if (maintainer_pkgs.hasOwnProperty(key)) {\n        if (!these_pkgs.includes(key)) {\n            acc[key] = maintainer_pkgs[key];\n        }\n    }\n    return acc;\n}, {}) : [];\n// Then flatten that to (source, target) pairs of (maintainer, package):\nthese_co_pkgs_flat = Object.entries(these_co_pkgs).flatMap(([source, targets]) =&gt;\n    targets.map(target =&gt; ({ source, target }))\n);\nlinks = [\n    ...these_pkgs.map(item =&gt; ({\n        source: maintainer, target: item, value: 4\n    })),\n    ...these_co_pkgs_flat.map(item =&gt; ({\n        source: item.source, target: item.target, value: 2\n    }))\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {Swatches} from \"@d3/color-legend\"\nSwatches(chart.scales.color)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrength = -400;\n\nchart = {\n\n    const width = 928;\n    const height = 600;\n\n    const types = Array.from(new Set(nodes.map(d =&gt; d.group)));\n\n    const color = d3.scaleOrdinal(types, d3.schemeCategory10);\n\n    const simulation = d3.forceSimulation(nodes)\n        .force(\"link\", d3.forceLink(links).id(d =&gt; d.id))\n        .force(\"charge\", d3.forceManyBody().strength(strength))\n        .force(\"x\", d3.forceX())\n        .force(\"y\", d3.forceY());\n\n    const svg = d3.create(\"svg\")\n        .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 14px sans-serif;\");\n\n    const link = svg.append(\"g\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke-width\", 1.5)\n        .selectAll(\"path\")\n        .data(links)\n        .join(\"path\")\n            .attr(\"stroke\", \"gray\")\n            .attr(\"stroke-width\", d =&gt; d.value);\n\n    const node = svg.append(\"g\")\n        .selectAll(\"g\")\n        .data(nodes)\n        .join(\"g\")\n            .call(drag(simulation));\n\n    node.append(\"circle\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 1.5)\n        .data(nodes)\n        .join(\"circle\")\n            .attr(\"fill\", d =&gt; color(d.group))\n            .attr(\"r\", d =&gt; d.size);\n\n    node.append(\"text\")\n        .attr(\"x\", 8)\n        .attr(\"y\", \"0.31em\")\n        .text(d =&gt; d.id)\n        .html(d =&gt; d.group === \"Co-maintainer\" ?\n            `&lt;a href=\"/repometrics-demo/maintainer.html\"\n                onclick=\"localStorage.setItem('orgmetricsMaintainer', '${d.id}')\"&gt;${d.id}&lt;/a&gt;` :\n            ((d.group === \"packages\" || d.group === \"otherPackages\") ?\n                `&lt;a href=\"/repometrics-demo/repo.html\"\n                    onclick=\"localStorage.setItem('orgmetricsRepo', '${d.id}')\"&gt;${d.id}&lt;/a&gt;` :\n            d.id))\n        .clone(true).lower()\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 3);\n\n    simulation.on(\"tick\", () =&gt; {\n        link.attr(\"d\", linkArc);\n        node.attr(\"transform\", d =&gt; `translate(${d.x},${d.y})`);\n    });\n\n    invalidation.then(() =&gt; simulation.stop());\n\n    return Object.assign(svg.node(), {scales: {color}});\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction linkArc(d) {\n    const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);\n    return `\n    M${d.source.x},${d.source.y}\n    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}\n    `;\n}\n\n\n\n\n\n\n\ndrag = simulation =&gt; {\n\n    function dragstarted(event, d) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n    }\n\n    function dragged(event, d) {\n        d.fx = event.x;\n        d.fy = event.y;\n    }\n\n    function dragended(event, d) {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n    }\n\n    return d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n}"
  },
  {
    "objectID": "maintainer.html#co-maintainers",
    "href": "maintainer.html#co-maintainers",
    "title": "Maintainers",
    "section": "Co-Maintainers",
    "text": "Co-Maintainers\n\nhtl.html`&lt;ul&gt;${these_cos_list}&lt;/ul&gt;`"
  },
  {
    "objectID": "contributor.html",
    "href": "contributor.html",
    "title": "Contributors and Maintainers",
    "section": "",
    "text": "function sparkbar(max) {\n  const colourScale = d3.scaleSequential(d3.interpolateCool)\n    .domain([0, max]);\n\n  return (x) =&gt; htl.html`&lt;div style=\"\n    background: ${colourScale(x)};\n    color: black;\n    width: ${100 * x / max}%;\n    float: right;\n    padding-right: 3px;\n    box-sizing: border-box;\n    overflow: visible;\n    display: flex;\n    justify-content: end;\"&gt;${x.toFixed(2).toLocaleString(\"en-US\")}`\n}\n\nfunction tooltip(title, expl) {\n    const th = document.createElement(\"th\");\n    th.title = expl\n    th.style.background = \"#f0f8ff\";\n    th.textContent = title;\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    return th;\n}\n\nfunction pkgfmt(pkg) {\n    const th = document.createElement(\"th\");\n    th.title = \"hover\"\n    th.style.background = \"#f0f8ff\";\n    th.textContent = pkg;\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    th.addEventListener(\"click\", () =&gt; {\n        localStorage.setItem(\"orgmetricsRepo\", pkg);\n        th.style.background=\"#a0f8ff\";\n        window.location.href=\"/repometrics-demo/repo.html\";\n    });\n\n    return th;\n}\nrepo_src = {\n    return transpose(repo_src_in).map(row =&gt; ({\n        ...row,\n    }));\n}\njson_data = FileAttachment(\"results-json-data.json\").json();\nmaintainer_pkgs = json_data['maintainer_pkgs'];\ncomaintainers = json_data['comaintainers'];\nmaintainers = Object.keys(maintainer_pkgs);\nmaintainerSet = localStorage.getItem(\"orgmetricsMaintainer\") ||\n    maintainers [Math.floor(Math.random() * maintainers.length)]\nviewof maintainer = Inputs.select(\n    maintainers,\n    {\n        multiple: false,\n        value: maintainerSet,\n        label: htl.html`&lt;b&gt;Maintainer:&lt;/b&gt;`\n    }\n)\ns = localStorage.setItem(\"orgmetricsMaintainer\", maintainer.toString());\nmaintainer_gh_url =\n    htl.html`&lt;a href=\"https://github.com/${maintainer}\" target=\"_blank\"&gt;&lt;i&gt;${maintainer}&lt;/i&gt;&lt;/a&gt;`\nthese_pkgs = maintainer_pkgs[maintainer] || null;\n\nthese_cos = comaintainers[maintainer] || null\nthese_cos_list = these_cos ?\nthese_cos.map(i =&gt; htl.html`\n&lt;div onclick=${() =&gt; localStorage.setItem('orgmetricsMaintainer', i)}&gt;\n&lt;li&gt;&lt;a href=\"/repometrics-demo/contributor.html\"&gt;${i}&lt;/a&gt;&lt;/li&gt;\n&lt;/div&gt;`) : htl.html`&lt;li&gt;No co-maintainers&lt;/li&gt;`;\nhtl.html`&lt;div&gt;&lt;a href=\"https://github.com/${maintainer}\" target=\"_blank\"&gt;github.com/${maintainer}&lt;/a&gt;&lt;/div&gt;`"
  },
  {
    "objectID": "contributor.html#repositories",
    "href": "contributor.html#repositories",
    "title": "Contributors and Maintainers",
    "section": "Repositories",
    "text": "Repositories\nThis is a sub-set of the main table on the Organization page, showing repository metrics aggregated across the four categories described there. Values are shown only for any repositories to which  has contributed, and are scaled between 0 and 1 based on the distribution of values across the entire organization, with higher values always better than lower values.\n\n\nmetricsGroupedTable = {\n    return transpose(metrics_table_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmetricsTable = metricsGroupedTable.filter(i =&gt; these_pkgs.includes(i.package));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(metricsTable, {\n    width: {\n        package: 100,\n        total: 200,\n        development: 200,\n        issues: 200,\n        popularity: 200,\n        meta: 200,\n    },\n    format: {\n        package: d =&gt; pkgfmt(d),\n        development: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.development)),\n        issues: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.issues)),\n        popularity: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.popularity)),\n        meta: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.meta)),\n        total: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.total)),\n    },\n    header: {\n        development: tooltip(\"Development\", \"Code development and maintenance metrics\"),\n        issues: tooltip(\"Issues\", \"GitHub issues and pull request activity\"),\n        popularity: tooltip(\"Popularity\", \"Project popularity on CRAN (where applicable) and GitHub\"),\n        meta: tooltip(\"Dependencies and releases\", \"\"),\n        total: tooltip(\"Overall\", \"Average across all four categories of metrics.\"),\n    },\n})"
  },
  {
    "objectID": "contributor.html#network",
    "href": "contributor.html#network",
    "title": "Contributors and Maintainers",
    "section": "Network",
    "text": "Network\n\nco_pkgs = these_cos ? these_cos.map(i =&gt; maintainer_pkgs[i]).flat() : [];\npkgs_expanded_full = [\n    ...these_pkgs,\n    ...co_pkgs\n];\n// Reduce to unique pkgs:\npkgs_expanded = [...new Set(pkgs_expanded_full)];\n\nco_nodes = these_cos ?\n    these_cos.map(item =&gt; ({ id: item, group: \"Co-maintainer\", size: 6 })) : [];\nnodes = [\n    { id: maintainer, group: \"Maintainer\", size: 10 },\n    ...pkgs_expanded.map(item =&gt; ({\n        id: item,\n        group: these_pkgs.includes(item) ? \"packages\" : \"otherPackages\",\n        size: these_pkgs.includes(item) ? 8 : 4,\n    })),\n    ...co_nodes\n];\n\n// edges are mappings from co-maintainers to all packages. First collect list\n// of all packages from co-maintainers:\nthese_co_pkgs = these_cos ? these_cos.reduce((acc, key) =&gt; {\n    if (maintainer_pkgs.hasOwnProperty(key)) {\n        if (!these_pkgs.includes(key)) {\n            acc[key] = maintainer_pkgs[key];\n        }\n    }\n    return acc;\n}, {}) : [];\n// Then flatten that to (source, target) pairs of (maintainer, package):\nthese_co_pkgs_flat = Object.entries(these_co_pkgs).flatMap(([source, targets]) =&gt;\n    targets.map(target =&gt; ({ source, target }))\n);\nlinks = [\n    ...these_pkgs.map(item =&gt; ({\n        source: maintainer, target: item, value: 4\n    })),\n    ...these_co_pkgs_flat.map(item =&gt; ({\n        source: item.source, target: item.target, value: 2\n    }))\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {Swatches} from \"@d3/color-legend\"\nSwatches(chart.scales.color)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrength = -400;\n\nchart = {\n\n    const width = 928;\n    const height = 600;\n\n    const types = Array.from(new Set(nodes.map(d =&gt; d.group)));\n\n    const color = d3.scaleOrdinal(types, d3.schemeCategory10);\n\n    const simulation = d3.forceSimulation(nodes)\n        .force(\"link\", d3.forceLink(links).id(d =&gt; d.id))\n        .force(\"charge\", d3.forceManyBody().strength(strength))\n        .force(\"x\", d3.forceX())\n        .force(\"y\", d3.forceY());\n\n    const svg = d3.create(\"svg\")\n        .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 14px sans-serif;\");\n\n    const link = svg.append(\"g\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke-width\", 1.5)\n        .selectAll(\"path\")\n        .data(links)\n        .join(\"path\")\n            .attr(\"stroke\", \"gray\")\n            .attr(\"stroke-width\", d =&gt; d.value);\n\n    const node = svg.append(\"g\")\n        .selectAll(\"g\")\n        .data(nodes)\n        .join(\"g\")\n            .call(drag(simulation));\n\n    node.append(\"circle\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 1.5)\n        .data(nodes)\n        .join(\"circle\")\n            .attr(\"fill\", d =&gt; color(d.group))\n            .attr(\"r\", d =&gt; d.size);\n\n    node.append(\"text\")\n        .attr(\"x\", 8)\n        .attr(\"y\", \"0.31em\")\n        .text(d =&gt; d.id)\n        .html(d =&gt; d.group === \"Co-maintainer\" ?\n            `&lt;a href=\"/repometrics-demo/contributor.html\"\n                onclick=\"localStorage.setItem('orgmetricsMaintainer', '${d.id}')\"&gt;${d.id}&lt;/a&gt;` :\n            ((d.group === \"packages\" || d.group === \"otherPackages\") ?\n                `&lt;a href=\"/repometrics-demo/repo.html\"\n                    onclick=\"localStorage.setItem('orgmetricsRepo', '${d.id}')\"&gt;${d.id}&lt;/a&gt;` :\n            d.id))\n        .clone(true).lower()\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 3);\n\n    simulation.on(\"tick\", () =&gt; {\n        link.attr(\"d\", linkArc);\n        node.attr(\"transform\", d =&gt; `translate(${d.x},${d.y})`);\n    });\n\n    invalidation.then(() =&gt; simulation.stop());\n\n    return Object.assign(svg.node(), {scales: {color}});\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction linkArc(d) {\n    const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);\n    return `\n    M${d.source.x},${d.source.y}\n    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}\n    `;\n}\n\n\n\n\n\n\n\ndrag = simulation =&gt; {\n\n    function dragstarted(event, d) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n    }\n\n    function dragged(event, d) {\n        d.fx = event.x;\n        d.fy = event.y;\n    }\n\n    function dragended(event, d) {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n    }\n\n    return d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n}"
  },
  {
    "objectID": "contributor.html#co-contributors",
    "href": "contributor.html#co-contributors",
    "title": "Contributors and Maintainers",
    "section": "Co-Contributors",
    "text": "Co-Contributors\n\nhtl.html`&lt;ul&gt;${these_cos_list}&lt;/ul&gt;`"
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "Community Health",
    "section": "",
    "text": "The Organizational Maintenance and Repository Maintenance pages provide various insights into maintenance deficits and needs across the whole organization and within individual repositories. This page provides more detail on the various CHAOSS (Community Health Analytics in Open Source Software) models used to generate values shown on those two pages. Each of these conceptual models aggregates various individual metrics, and aims to synthesise prominent aspects of community health. This page provides insights into a range of those models, assessed for each repository in the epiverse-trace and reconhub GitHub organizations. Details of individual metrics can be seen on the Repository Maintenance page."
  },
  {
    "objectID": "models.html#aggregate-community-health",
    "href": "models.html#aggregate-community-health",
    "title": "Community Health",
    "section": "Aggregate Community Health",
    "text": "Aggregate Community Health\nThis page shows aggregate community health scores for all repositories within the reconhub and epiverse-trace organizations. Higher values describe repositories with greater community health scores. Values for individual models are standardised across all repositories to have mean values of zero and standard deviations of one. These results are aggregated across thirteen distinct models, leading to maximal aggregated values slightly exceeding that value.\n\nPlot = import(\"https://esm.sh/@observablehq/plot\")\n\n\n\n\n\n\n\nmodels_all = {\n    return transpose(models_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmodels_final = models_all.filter(function(mod) {\n    return mod.name === \"final\"\n})\nmodels_len = models_final.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models_final, {\n            y: \"package\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(models_final,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models_final, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "models.html#individual-models-of-community-health",
    "href": "models.html#individual-models-of-community-health",
    "title": "Community Health",
    "section": "Individual models of community health",
    "text": "Individual models of community health\nThe following section shows values for each individual model of community health for all repositories.\n\njson_data = FileAttachment(\"results-json-data.json\").json();\nrm_metrics_models = json_data['rm_metrics_models'];\nrm_models = rm_metrics_models['models'];\nrm_model_text = rm_metrics_models['model_names'];\nmodelsTextMap = rm_model_text.reduce((map, item) =&gt; {\n    return map.set(String(item.name), item.airtable_name);\n}, new Map());\nmodelsUrlMap = rm_model_text.reduce((map, item) =&gt; {\n    return map.set(String(item.name), item.url);\n}, new Map());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncommHealthVars = Array.from(modelsTextMap.keys());\ncommHealthText = commHealthVars.map(item =&gt; {\n    return modelsTextMap.has(item) ? modelsTextMap.get(item) : \"\";\n})\nviewof commHealthVar = Inputs.select(\n    rm_model_text,\n    {\n        multiple: \"false\",\n        label: \"Community Health Variable\",\n        format: x =&gt; x.airtable_name,\n    }\n);\n\nhtl.html`&lt;div&gt;\nClick this link for description of the &lt;a href=\"${commHealthVar.url}\" target=\"_blank\"&gt;\n&lt;i&gt;${commHealthVar.airtable_name}&lt;/i&gt;&lt;/a&gt; CHAOSS model.\n&lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodels_filtered = models_all.filter(function(mod) {\n    return mod.name === commHealthVar.name\n})\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models_filtered, {\n            y: \"package\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(models_filtered,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models_filtered, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "models.html#community-health-for-individual-repositories",
    "href": "models.html#community-health-for-individual-repositories",
    "title": "Community Health",
    "section": "Community health for individual repositories",
    "text": "Community health for individual repositories\nThe following section shows all models of community health for a selected repository. The names of the models are hyperlinked to the definitions within the specific pages of the CHAOSS models.\n\nreposAll = models_all.map(function(item) {\n    return item.package;\n});\nrepos = Array.from(new Set(reposAll));\nrepoSet = localStorage.getItem(\"orgmetricsRepo\") || repos [0]\nviewof repo = Inputs.select(\n    repos,\n    {\n        multiple: false,\n        value: repoSet,\n        label: htl.html`&lt;b&gt;Repository:&lt;/b&gt;`\n    }\n)\ntmpval = localStorage.setItem(\"orgmetricsRepo\", repo.toString());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodels_with_url = models_all.map(item =&gt; {\n    const key = item.name;\n    const url = modelsUrlMap.has(key) ? modelsUrlMap.get(key) :\n        \"https://chaoss.community/kbtopic/all-metrics-models/\";\n    const fullname = modelsTextMap.has(key) ? modelsTextMap.get(key) : item.name\n    return {\n        ...item,\n        fullname: fullname,\n        url: url\n    }\n})\nmodel_repo = models_with_url.filter(function(mod) {\n    return mod.package === repo && mod.name !== \"final\"\n})\nmodel_repo_len = model_repo.length\nbar_ht_mult = model_repo_len &gt; 20 ? 20 : 40;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: bar_ht_mult * model_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(model_repo, {\n            y: d =&gt; d.fullname,\n            x: d =&gt; d.value,\n            sort: {y: \"-x\" },\n            fill: d =&gt; d.value,\n        }),\n        Plot.barX(model_repo,\n            Plot.pointer(\n            {\n                y: d =&gt; d.fullname,\n                x: d =&gt; d.value,\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: d =&gt; d.value,\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(model_repo, {\n            x: d =&gt; d.value,\n            y: d =&gt; d.fullname,\n            text: d =&gt; d.fullname,\n            href: d =&gt; d.url,\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EpiVerse Organizational Overview",
    "section": "",
    "text": "This dashboard presents metrics and models for each repository within the epiverse-trace, reconhub, and reconverse GitHub organizations, and some related repositories from other sources. These organizations are linked under the  icon on the top right. The dashboard is intended to demonstrate the kinds of analyses and insights that are possible, and is expected to change and develop a lot. Please provide feedback by clicking on the  symbol and selecting “Feedback”.\nThere are\n84 repositories\nincluding\n\n\n\n32 from reconhub\n\n\n\n\n31 from epiverse-trace\n\n\n\n\n6 from reconverse\n\n\n\n\n\n\n\n\n\n\n\n\n\nUrgent mainetance required\n5 repositories\n\nwith high community engagement, yet low developer responsiveness:\n\n\n\nEpiEstim\n\n\n\nepireview\n\n\n\nincidence\n\n\n\nsandpaper\n\n\n\nvarnish\nTotal commits:\n30,120\n\nbetween \n2008\n and \n2025\n\n(Plot below shows time series)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGitHub Activity\n20,816\nTotal issues, comments, and pull requests\nThe dashboard currently has four main pages:\nThis dashboard currently only considers repositories which are R packages, and thus every repository is also a package. Some aspects measured here, like the following dependency network, rely on structures specific to R packages, while other aspects are more related to the structure of repositories on GitHub. The terms “repository” and “package” may nevertheless be considered interchangeable."
  },
  {
    "objectID": "index.html#package-network",
    "href": "index.html#package-network",
    "title": "EpiVerse Organizational Overview",
    "section": "Package Network",
    "text": "Package Network\nThis graph shows dependencies between all packages which use any other organization package. Nodes show individual packages, with circles for each package scaled by total numbers of dependent packages; that is, numbers of other packages which depend on that package. Edges connect dependent packages, with thicknesses scaled by total numbers of function calls by all dependent packages.\n\npkg_nodes = {\n    return transpose(nodes_in).map(row =&gt; ({\n        ...row,\n    }));\n}\npkg_edges = {\n    return transpose(edges_in).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrength = -400;\n\nchart = {\n\n    const width = 928;\n    const height = 600;\n\n    const types = Array.from(new Set(pkg_nodes.map(d =&gt; d.group)));\n\n    const color = d3.scaleOrdinal(types, d3.schemeCategory10);\n\n    const simulation = d3.forceSimulation(pkg_nodes)\n        .force(\"link\", d3.forceLink(pkg_edges).id(d =&gt; d.id))\n        .force(\"charge\", d3.forceManyBody().strength(strength))\n        .force(\"x\", d3.forceX())\n        .force(\"y\", d3.forceY());\n\n    const svg = d3.create(\"svg\")\n        .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 14px sans-serif;\");\n\n    const link = svg.append(\"g\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke-width\", 1.5)\n        .selectAll(\"path\")\n        .data(pkg_edges)\n        .join(\"path\")\n            .attr(\"stroke\", \"gray\")\n            .attr(\"stroke-width\", d =&gt; d.value);\n\n    const node = svg.append(\"g\")\n        .selectAll(\"g\")\n        .data(pkg_nodes)\n        .join(\"g\")\n            .call(drag(simulation));\n\n    node.append(\"circle\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 1.5)\n        .data(pkg_nodes)\n        .join(\"circle\")\n            .attr(\"fill\", d =&gt; color(d.group))\n            .attr(\"r\", d =&gt; d.size);\n\n    node.append(\"text\")\n        .attr(\"x\", 8)\n        .attr(\"y\", \"0.31em\")\n        .text(d =&gt; d.id)\n        .html(d =&gt;\n            `&lt;a href=\"/repometrics-demo/repo.html\"\n                onclick=\"localStorage.setItem('orgmetricsRepo', '${d.id}')\"&gt;${d.id}&lt;/a&gt;`)\n        .clone(true).lower()\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 3);\n\n    simulation.on(\"tick\", () =&gt; {\n        link.attr(\"d\", linkArc);\n        node.attr(\"transform\", d =&gt; `translate(${d.x},${d.y})`);\n    });\n\n    invalidation.then(() =&gt; simulation.stop());\n\n    return Object.assign(svg.node(), {scales: {color}});\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction linkArc(d) {\n    const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);\n    return `\n    M${d.source.x},${d.source.y}\n    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}\n    `;\n}\n\n\n\n\n\n\n\ndrag = simulation =&gt; {\n\n    function dragstarted(event, d) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n    }\n\n    function dragged(event, d) {\n        d.fx = event.x;\n        d.fy = event.y;\n    }\n\n    function dragended(event, d) {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n    }\n\n    return d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n}\n\n\n\n\n\n\n\n\n\nfunction sparkbar(max) {\n  const colourScale = d3.scaleSequential(d3.interpolateCool)\n    .domain([0, max]);\n\n  return (x) =&gt; htl.html`&lt;div style=\"\n    background: ${colourScale(x)};\n    color: black;\n    width: ${100 * x / max}%;\n    float: right;\n    padding-right: 3px;\n    box-sizing: border-box;\n    overflow: visible;\n    display: flex;\n    justify-content: end;\"&gt;${x.toFixed(2).toLocaleString(\"en-US\")}`\n}\n\nfunction tooltip(title, expl) {\n    const th = document.createElement(\"th\");\n\n    th.title = expl\n\n    th.style.display = \"flex\";\n    th.style.justifyContent = \"flex-end\";\n    th.style.backgroundColor = \"#f0f8ff\";\n    th.style.width = \"100%\";\n    th.style.position = \"relative\";\n\n    const textSpan = document.createElement(\"span\");\n\n    textSpan.textContent = title;\n    textSpan.style.flex = \"1\";\n    textSpan.style.textAlign = \"right\";\n    textSpan.style.position = \"static\";\n    textSpan.style.wordWrap = \"break-word\";\n    textSpan.style.overflowWrap = \"break-word\";\n    textSpan.style.whiteSpace = \"normal\";\n\n    th.appendChild(textSpan);\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    return th;\n}\n\nfunction pkgfmt(pkg) {\n    const th = document.createElement(\"th\");\n    th.title = \"hover\"\n    th.style.background = \"#f0f8ff\";\n    th.textContent = pkg;\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    th.addEventListener(\"click\", () =&gt; {\n        localStorage.setItem(\"orgmetricsRepo\", pkg);\n        th.style.background=\"#a0f8ff\";\n        window.location.href=\"/repometrics-demo/repo.html\";\n    });\n\n    return th;\n}\n\nfunction ctbfmt(ctb) {\n    const th = document.createElement(\"th\");\n    th.title = \"hover\"\n    th.style.background = \"#f0f8ff\";\n    th.textContent = ctb;\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    th.addEventListener(\"click\", () =&gt; {\n        localStorage.setItem('orgmetricsMaintainer', ctb);\n        th.style.background=\"#a0f8ff\";\n        window.location.href=\"/repometrics-demo/contributor.html\";\n    });\n\n    return th;\n}"
  },
  {
    "objectID": "index.html#aggregate-metrics",
    "href": "index.html#aggregate-metrics",
    "title": "EpiVerse Organizational Overview",
    "section": "Aggregate metrics",
    "text": "Aggregate metrics\nThis second presents aggregated results from statistics assessed for each repository, and aggregated across the organizations into four distinct categories:\n\nDevelopment: Metrics of both code development and maintainer continuity and diversity. High scores reflect repositories with high levels of code development from a diverse community of maintainers.\nGitHub: Metrics derived from GitHub issues and pull requests. High scores reflect repositories with active use of issues, pull requests, code reviews, and rapid responses from core maintainers to issues or pull requests opened by wider community members.\nPopularity: Metrics of repository popularity, derived from CRAN download numbers (where applicable), GitHub stars and forks, and issue comments from user communities beyond core maintainers.\nDependencies and Releases: High scores reflect repositories with fewer dependencies and frequent releases.\n\nThe Overall column is an average of all metrics across all of these four categorical groupings, and provides an overall metric of repository health.\n\n\nmetricsData = {\n    return transpose(metrics_dates_in).map(row =&gt; ({\n        ...row,\n        date: new Date(row.date)\n    }));\n}\n\n\n\n\n\n\n\nPlot.plot({\n    color: {\n        legend: true,\n        label: \"name\",\n        swatchHeight: 4,\n        domain: [\"Development\", \"GitHub\", \"Popularity\", \"Dep.+Rel.\", \"Overall\"],\n    },\n    marks: [\n        Plot.lineY(metricsData, {\n            x: \"date\",\n            y: \"value\",\n            stroke: \"name\",\n            strokeWidth:  2,\n            strokeDasharray: \"2,5\",\n        }),\n        Plot.linearRegressionY(metricsData, {\n            x: \"date\",\n            y: \"value\",\n            stroke: \"name\",\n            strokeWidth: 2,\n            ci: 0\n        }),\n        Plot.axisY({\n            label: null,\n        }),\n    ],\n    x: {\n        grid: true,\n        type: \"utc\",\n        domain: [d3.min(metricsData, d =&gt; d.date), d3.max(metricsData, d =&gt; d.date)],\n        tickFormat: \"%Y\", \n        ticks: [...new Set(metricsData.map(d =&gt; d.date.getFullYear()))].map(year =&gt; new Date(`${year}-01-01`)),\n    },\n    y: { grid: true },\n    style: {\n        fontSize: '16px',\n    }\n})\n\n\n\n\n\n\n\n\nThe following table shows metrics for each package, for the latest time period only aggregated into each of the four groups. Clicking on the “package” values will lead to the repository maintenance page with further details of the selected package or repository.\n\nmetricsGroupedTable = {\n    return transpose(metrics_table_in).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\nInputs.table(metricsGroupedTable, {\n    width: {\n        package: 100,\n        total: 200,\n        development: 200,\n        issues: 200,\n        popularity: 200,\n        meta: 200,\n    },\n    format: {\n        package: d =&gt; pkgfmt(d),\n        development: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.development)),\n        issues: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.issues)),\n        popularity: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.popularity)),\n        meta: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.meta)),\n        total: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.total)),\n    },\n    header: {\n        development: tooltip(\"Development\", \"Code development and maintenance metrics\"),\n        issues: tooltip(\"Issues\", \"GitHub issues and pull request activity\"),\n        popularity: tooltip(\"Popularity\", \"Project popularity on CRAN (where applicable) and GitHub\"),\n        meta: tooltip(\"Dependencies and releases\", \"\"),\n        total: tooltip(\"Overall\", \"Average across all four categories of metrics.\"),\n    },\n})"
  },
  {
    "objectID": "index.html#maintenance-deficit",
    "href": "index.html#maintenance-deficit",
    "title": "EpiVerse Organizational Overview",
    "section": "Maintenance deficit",
    "text": "Maintenance deficit\nThis next graph shows the maintenance deficit over time, as the difference between community engagement and developer responsiveness. Repositories with high community engagement yet low developer responsiveness have a high maintenance deficit, and vice-versa. The “Deficit” scores are scaled to fix within the same range as the metrics of community engagement and developer responsiveness.\n\nmaintenanceData = {\n    return transpose(maintenance_ts_in).map(row =&gt; ({\n        ...row,\n        date: new Date(row.date)\n    }));\n}\n\n\n\n\n\n\n\nPlot.plot({\n    color: {\n        legend: true,\n        label: \"name\",\n        swatchHeight: 4,\n        domain: [\"Comm. Engage.\", \"Dev. Resp.\", \"Deficit\"],\n    },\n    marks: [\n        Plot.lineY(maintenanceData, {\n            x: \"date\",\n            y: \"value\",\n            stroke: \"name\",\n            strokeWidth:  2,\n            strokeDasharray: \"2,5\",\n        }),\n        Plot.linearRegressionY(maintenanceData, {\n            x: \"date\",\n            y: \"value\",\n            stroke: \"name\",\n            strokeWidth: 2,\n            ci: 0\n        }),\n        Plot.axisY({\n            label: null,\n        }),\n    ],\n    x: {\n        grid: true,\n        type: \"utc\",\n        domain: [d3.min(metricsData, d =&gt; d.date), d3.max(metricsData, d =&gt; d.date)],\n        tickFormat: \"%Y\",\n        ticks: [...new Set(metricsData.map(d =&gt; d.date.getFullYear()))].map(year =&gt; new Date(`${year}-01-01`)),\n    },\n    y: { grid: true },\n    style: {\n        fontSize: '16px',\n    }\n})\n\n\n\n\n\n\nAnd these are maintenance deficit values for individual repositories (packages), for the latest time period only.\n\nmaintenanceRepoData = {\n    return transpose(maintenance_repo_in).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\nInputs.table(maintenanceRepoData, {\n    width: {\n        package: 100,\n        comm_engage: 200,\n        dev_resp: 200,\n        maintenance: 200,\n    },\n    format: {\n        package: d =&gt; pkgfmt(d),\n        comm_engage: sparkbar(d3.max(maintenanceRepoData, d =&gt; d.comm_engage)),\n        dev_resp: sparkbar(d3.max(maintenanceRepoData, d =&gt; d.dev_resp)),\n        maintenance: sparkbar(d3.max(maintenanceRepoData, d =&gt; d.maintenance)),\n    },\n    header: {\n        comm_engage: tooltip(\"Community Engagement\", \"Community Engagement metrics\"),\n        dev_resp: tooltip(\"Developer Responsivness\", \"Developer Responsiveness metrics\"),\n        maintenance: tooltip(\n            \"Maintenance Deficit\",\n            \"Community Engagment minus Developer Responsivess (rescaled)\"\n        ),\n    },\n})"
  },
  {
    "objectID": "index.html#additional-metrics-and-indicators",
    "href": "index.html#additional-metrics-and-indicators",
    "title": "EpiVerse Organizational Overview",
    "section": "Additional metrics and indicators",
    "text": "Additional metrics and indicators\nThe following show several more distinct indicators of maintenance need, all of which are assessed over the most recent period of repository activity:\n\nCtb. Absence: A measure of “contributor absence” for each repository, indicating maintenance deficit arising through absence of primary contributors.\nResp. Time: The average time for a core maintainer to respond to a new issue or pull request\nIssue Labels: The proportion of issues with labels\nProp. Bugs: The proportion of new issues opened that were bug reports\n\n\nextraMetricsTable = {\n    return transpose(data_extra_metrics_in).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\nInputs.table(extraMetricsTable, {\n    width: {\n        repo: 100,\n        ctb_absence: 200,\n        response: 200,\n        labels: 200,\n        bugs: 200,\n    },\n    format: {\n        repo: d =&gt; pkgfmt(d),\n        ctb_absence: sparkbar(d3.max(extraMetricsTable, d =&gt; d.ctb_absence)),\n        response: sparkbar(d3.max(extraMetricsTable, d =&gt; d.response)),\n        labels: sparkbar(d3.max(extraMetricsTable, d =&gt; d.labels)),\n        bugs: sparkbar(d3.max(extraMetricsTable, d =&gt; d.bugs)),\n    },\n    header: {\n        ctb_absence: tooltip(\"Ctb. Absence\", \"Contributor absence factor\"),\n        response: tooltip(\"Resp. Time\", \"Time to respond to GitHub issues and pull requests\"),\n        labels: tooltip(\"Issue Labels\", \"Proportion of labelled issues\"),\n        bugs: tooltip(\"Prop. Bugs\", \"Proportion of issues and PRs which are about bugs.\"),\n    },\n})\n\n\n\n\n\n\n\n\nContributor Absence\nFinally, this table shows a metric of main contributor absence. Values are only shown for main contributors who have been recently absent from repositories. A contributor who has been entirely absent during the most recent period, and was responsible for 100% of the commits from some number, n, repositories, would have a contributor absence score of n. The same contributor absence of n could also reflect somebody contributing exactly 50% of the code to 2\\(\\times\\)n repositories, and being entirely absent during the recent period. Any contributions by that contributor during the recent period would reduce the absence factor. In general, high absence factors describe recently absent contributors who have previously been major contributors to numerous repositories.\n\nPlot = import(\"https://esm.sh/@observablehq/plot\")\n\n\n\n\n\n\n\nctb_abs_ctb = {\n    return transpose(ctb_abs_ctb_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nctb_abs_ctb_len = ctb_abs_ctb.length;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// The 'ctbfmt' function set the localStorage 'orgmetricsMaintainer' value, but\n// the inputs here are full names, no GitHub handles, so unless the are\n// identical, this currently fails and needs to be fixed.\nInputs.table(ctb_abs_ctb, {\n    width: {\n        name: 200,\n        login: 200,\n        measure: 200,\n    },\n    format: {\n        login: d =&gt; ctbfmt(d),\n        measure: sparkbar(d3.max(ctb_abs_ctb, d =&gt; d.measure)),\n    },\n    header: {\n        measure: tooltip(\"Ctb. Absence\", \"Contributor absence factor\"),\n    },\n})"
  },
  {
    "objectID": "index.html#maintenance-priorities",
    "href": "index.html#maintenance-priorities",
    "title": "EpiVerse Organizational Overview",
    "section": "Maintenance Priorities",
    "text": "Maintenance Priorities\nThis section links to repositories with distinct maintenance priorities.\n\n\n\n\nDevelopment burstiness\n\n\nEpiEstim\n\n\n\nincidence\n\n\n\nNumber of dependencies\n\n\nsandpaper\n\n\n\nIssue response time\n\n\nsandpaper\n\n\n\nvarnish\n\n\n\nPR response time\n\n\nEpiEstim\n\n\n\nepireview\n\n\n\nsandpaper\n\n\n\nvarnish\n\n\n\nPR review time\n\n\nEpiEstim\n\n\n\nepireview\n\n\n\nvarnish\n\n\n\nRelease frequency\n\n\nEpiEstim\n\n\n\nResponse time\n\n\nEpiEstim\n\n\n\nepireview\n\n\n\nvarnish\n\n\n\nTime to close issues\n\n\nepireview\n\n\n\nsandpaper"
  },
  {
    "objectID": "repo.html",
    "href": "repo.html",
    "title": "Repositories",
    "section": "",
    "text": "function sparkbar(max) {\n  const colourScale = d3.scaleSequential(d3.interpolateCool)\n    .domain([0, max]);\n\n  return (x) =&gt; htl.html`&lt;div style=\"\n    background: ${colourScale(x)};\n    color: black;\n    width: ${100 * x / max}%;\n    float: right;\n    padding-right: 3px;\n    box-sizing: border-box;\n    overflow: visible;\n    display: flex;\n    justify-content: end;\"&gt;${x.toFixed(2).toLocaleString(\"en-US\")}`\n}\nmetricsTranspose = {\n    return transpose(metrics_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nrepo_src = {\n    return transpose(repo_src_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nctb_absTranspose = {\n    return transpose(ctb_abs_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nissue_respTranspose = {\n    return transpose(issue_resp_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nissue_bugsTranspose = {\n    return transpose(issue_bugs_in).map(row =&gt; ({\n        ...row,\n    }));\n}\ndepsTranspose = {\n    return transpose(deps_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nfnCallsTranspose = {\n    return transpose(fn_calls_in).map(row =&gt; ({\n        ...row,\n    }));\n}\njson_data = FileAttachment(\"results-json-data.json\").json();\ngitlogDataTranspose = json_data['gitlog'].map(row =&gt; ({\n    ...row,\n    first_commit: new Date(row.first_commit)\n}));\n\ncranDataAll = json_data['cran'];\nnot_cran_in = json_data['not_cran'];\nrepos_on_r_univ = json_data['r_universe']['data_is_on_r_univ'];\ndata_r_univ_jobs = json_data['r_universe']['r_univ_jobs'];\ndata_r_univ_builds = json_data['r_universe']['r_univ_builds'];\ndata_r_univ_stats = json_data['r_universe']['r_univ_stats'];\nreposAll = metricsTranspose.map(function(item) {\n    return item.package;\n});\nrepos = Array.from(new Set(reposAll));\nrepoSet = localStorage.getItem(\"orgmetricsRepo\") || repos [Math.floor(Math.random() * repos.length)]\nviewof repo = Inputs.select(\n    repos,\n    {\n        multiple: false,\n        value: repoSet,\n        label: htl.html`&lt;b&gt;Repository:&lt;/b&gt;`\n    }\n)\ns = localStorage.setItem(\"orgmetricsRepo\", repo.toString());\nrepoURL = repo_src.filter(function(r) {\n    return r.package === repo\n})[0].url;\nhtl.html`&lt;div&gt;\nClick here for the source code of the\n&lt;a href=${repoURL} target=\"_blank\"&gt;&lt;i&gt;${repo}&lt;/i&gt; repository&lt;/a&gt;.\n&lt;/div&gt;`\nctb_abs = ctb_absTranspose.filter(function(r) {\n    return r.repo === repo\n})\nissue_resp = issue_respTranspose.filter(function(r) {\n    return r.repo === repo\n})\nissue_bugs = issue_bugsTranspose.filter(function(r) {\n    return r.repo === repo\n})\ndeps = depsTranspose.filter(function(r) {\n    return r.package === repo\n})\nfn_calls = fnCallsTranspose.filter(function(r) {\n    return r.package === repo\n})\nhas_fn_calls = fn_calls.length &gt; 0;\ncran_data = cranDataAll.filter(function(r) {\n    return r.package === repo\n})\nhas_cran_data = cran_data.length &gt; 0;\nnot_on_cran = not_cran_in.includes(repo);\n\ngitlog = gitlogDataTranspose.filter(function(r) {\n    return r.package === repo\n})\ngitlog_total_commits = gitlog[0]['num_commits'].toLocaleString();\ngitlog_first_commit = gitlog[0]['first_commit'].toLocaleDateString(\"en-GB\", {\n    month: 'short',\n    year: 'numeric'\n});\n\nr_univ_page = repos_on_r_univ.filter(function(r) {\n    return r.package === repo\n})\nis_on_r_univ = r_univ_page.length &gt; 0;\nr_univ_universe = is_on_r_univ ? r_univ_page[0]['universe'] : undefined;\nr_univ_package = is_on_r_univ ? r_univ_page[0]['package'] : undefined;\n\nr_univ_jobs = data_r_univ_jobs[repo];\nr_univ_builds = data_r_univ_builds[repo];\n\nr_univ_stats = data_r_univ_stats.filter(function(r) {\n    return r.package === repo\n})\nr_univ_score = is_on_r_univ ? r_univ_stats[0]['score'].toLocaleString() : undefined;\nr_univ_url = \"https://\" + r_univ_universe + \".r-universe.dev/\" + r_univ_package;\nr_univ_score_html = r_univ_score ?\n    htl.html`&lt;a href=${r_univ_url} target=\"_blank\"&gt;r-universe score&lt;/a&gt;: ${r_univ_score}` :\n    htl.html`Repository not on r-universe`;\nrepoMetrics = {\n    return transpose(repo_metrics_in[repo]).map(row =&gt; ({\n        ...row,\n    }))\n}\nctbs = {\n    return transpose(ctbs_in[repo]).map(row =&gt; ({\n        ...row,\n    }))\n}\nctbs_gh = ctbs.map((ctb) =&gt; ctb['gh_handle']).filter(item =&gt; item != null);\nrank_index = rank_names_in.indexOf(repo);\nrank_vector = ranks_in[rank_index];\norder_vector = Array\n    .from(rank_vector.keys())\n    .sort((a, b) =&gt; rank_vector[b] - rank_vector[a])\n    .filter(item =&gt; item !== rank_index);\nnum_similar = 5\norder_vector_sub = order_vector.slice(0, num_similar);\nmatched_names = order_vector_sub.map(i =&gt; rank_names_in[i]);\n\nsimilar_pkgs = matched_names.map(i =&gt; {\n    const url = (repo_src.filter(function(r) {\n        return r.package === i\n    }, i)[0] || {}).url || null;\n    return htl.html`&lt;li&gt;&lt;a href=\"/repometrics-demo/repo.html\" onclick=\"localStorage.setItem('orgmetricsRepo', '${i}')\"&gt;${i}&lt;/a&gt;&lt;/li&gt;`\n});\nfunction pluraliseObjects(x, what) {\n    if (x === 0) {\n        return \"No \" + what + \"s\";\n    } else if (x === 1) {\n        return \"1 \" + what;\n    } else {\n        return x + \" \" + what + \"s\";\n    }\n}\n\ngitlog_txt = htl.html`&lt;li&gt;${gitlog_total_commits} commits since ${gitlog_first_commit}&lt;/li&gt;`;\n\nmaintainer_count = repoMetrics.filter(function(m) {\n    return m.name == \"maintainer_count\"\n})[0].value;\nmaintainer_count_txt = pluraliseObjects(maintainer_count, \"primary maintainer\");\n\nmaintainer_gh = [].concat(ctbs_gh.slice(0, maintainer_count) || []);\nmaintainer_gh_list = maintainer_gh.length == 0 ? undefined:\n    (maintainer_gh.length == 1 ? htl.html`\n&lt;div onclick=${() =&gt; localStorage.setItem('orgmetricsMaintainer', maintainer_gh)}&gt;\n&lt;li&gt;&lt;a href='/repometrics-demo/contributor.html'&gt;${maintainer_gh}&lt;/a&gt;&lt;/li&gt;\n&lt;/div&gt;\n` : maintainer_gh.map(m =&gt; htl.html`\n&lt;div onclick=${() =&gt; localStorage.setItem('orgmetricsMaintainer', m)}&gt;\n&lt;li&gt;&lt;a href='/repometrics-demo/contributor.html'&gt;${m}&lt;/a&gt;&lt;/li&gt;\n&lt;/div&gt;\n`));\nmaintainer_gh_list_txt = maintainer_gh.length &gt; 0 ? htl.html`&lt;ul&gt;${maintainer_gh_list}&lt;/ul&gt;` : undefined;\n\nctb_gh = [].concat(ctbs_gh.slice(maintainer_count) || []);\nctb_count = ctb_gh.length;\nctb_count_txt = pluraliseObjects(ctb_count, \"additional contributor\");\nctb_count_list = ctb_gh.map((item, i) =&gt; htl.html`\n&lt;span onclick=${() =&gt; localStorage.setItem('orgmetricsMaintainer', item)}&gt;\n&lt;a href='/repometrics-demo/contributor.html'&gt;${item}&lt;/a&gt;${i &lt; ctb_gh.length - 1 ? \", \" : \"\"}&lt;/span&gt;`);\nctb_count_html = ctb_count == 0 ? htl.html`&lt;div&gt;No additional contributors&lt;/div&gt;` :\n    htl.html`&lt;div&gt;${ctb_count_txt}: ${ctb_count_list}&lt;/div&gt;`;\n\nnum_commits = repoMetrics.filter(function(m) {\n    return m.name == \"num_commits\"\n})[0].value;\ntest_coverage = repoMetrics.filter(function(m) {\n    return m.name == \"test_coverage\"\n})[0].value;\ntest_coverage_txt = \"Test coverage: \" + (test_coverage ? (test_coverage * 100) + \"%\" : \"none\");\n\nnum_stars = repoMetrics.filter(function(m) {\n    return m.name == \"num_stars\"\n})[0].value;\nnum_forks = repoMetrics.filter(function(m) {\n    return m.name == \"num_forks\"\n})[0].value;\nstars_forks = (num_stars + num_forks).toLocaleString();\nstars_forks_html = htl.html`&lt;a href=${repoURL} target=\"_blank\"&gt;GitHub&lt;/a&gt; stars and forks: ${stars_forks}`\n\nnum_dl = repoMetrics.filter(function(m) {\n    return m.name == \"cran_downloads\"\n})[0].value.toLocaleString();\ncran_dl_html = not_on_cran ?\n    htl.html`Package is not on CRAN` :\n    htl.html`Total &lt;a href=\"https://cran.r-project.org/package=${repo}\" target=\"_blank\"&gt;CRAN&lt;/a&gt; downloads: ${num_dl}`;\n\nissues_active = repoMetrics.filter(function(m) {\n    return m.name == \"issues_active\"\n})[0].value;\nchange_req_n_opened = repoMetrics.filter(function(m) {\n    return m.name == \"change_req_n_opened\"\n})[0].value;\nissue_count = issues_active + change_req_n_opened;\ngh_text = (issue_count === 1) ? \"GitHub Issue\" : \"GitHub Issues\";\nissue_count_html = issues_active ?\n    htl.html`Recent &lt;a href=\"${repoURL}/issues\" target=\"_blank\"&gt;${gh_text}&lt;/a&gt;: ${issue_count}` :\n    htl.html`No GitHub issues`;\n\n// 'issue_cmt_count' from repometrics is *mean* value; convert back to\n// full count here:\nissue_cmt_count = Math.ceil(repoMetrics.filter(function(m) {\n    return m.name == \"issue_cmt_count\"\n})[0].value * issues_active);\ngh_issue_cmt_text = (issue_cmt_count === 1) ? \"Issue comment\" : \"Issue comments\";\nissue_cmt_html = issues_active ?\n    htl.html`Recent &lt;a href=\"${repoURL}/issues\" target=\"_blank\"&gt;${gh_issue_cmt_text}&lt;/a&gt;: ${issue_cmt_count}` :\n    htl.html`No issue comments`;\n\nimp_txt = 'Imports: ' + deps[0]['imports'];\nsug_txt = 'Suggests: ' + deps[0]['suggests'];\n\ndeps_in_org = [].concat(deps[0]['deps_in_org'] || []);\ndeps_in_org_txt = deps_in_org.length == 0 ?\n    'Depends on no other pkgs in org' :\n    'Depends on org pkgs:';\ndeps_in_org_list = deps_in_org.length === 0 ? undefined :\n    deps_in_org.map(d =&gt; htl.html`\n&lt;li&gt;\n&lt;a href='/repometrics-demo/repo.html' onclick=\"localStorage.setItem('orgmetricsRepo', '${d}')\"&gt;${d}&lt;/a&gt;\n&lt;/li&gt;`);\nn_deps_in_org_txt = deps_in_org.length &gt; 0 ? htl.html`&lt;ul&gt;${deps_in_org_list}&lt;/ul&gt;` : undefined;\n\nrevdeps = [].concat(deps[0]['revdeps'] || []);\nrevdeps_list = revdeps.length == 0 ? undefined :\n    revdeps.map(d =&gt; htl.html`\n&lt;li&gt;\n&lt;a href='/repometrics-demo/repo.html' onclick=\"localStorage.setItem('orgmetricsRepo', '${d}')\"&gt;${d}&lt;/a&gt;\n&lt;/li&gt;`);\nrevdeps_in_org = revdeps.length &gt; 0 ?\n    'Dependend on by org pkgs:' :\n    'Not depended on by any other pkgs in org';\nrevdeps_list_txt = revdeps.length &gt; 0 ? htl.html`&lt;ul&gt;${revdeps_list}&lt;/ul&gt;` : undefined;"
  },
  {
    "objectID": "repo.html#pkgcheck-summary",
    "href": "repo.html#pkgcheck-summary",
    "title": "Repositories",
    "section": "pkgcheck Summary",
    "text": "pkgcheck Summary\nThis shows the summary output from rOpenSci’s pkgcheck package. Passing checks are marked by ✅; failing checks by ❌; and optional checks that may be worth examining with 👀.\n\nthis_pkg_summary = pkgcheck_in[repo];\n\nfunction unescapeHtml(unsafe) {\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = unsafe;\n  return textarea.value;\n}\n\nhtl.html`\n  &lt;div&gt;${this_pkg_summary.map((item) =&gt; htl.html.fragment`&lt;ul&gt;\n    &lt;li&gt;${unescapeHtml(item)}&lt;/li&gt;\n  &lt;/ul&gt;`)}&lt;/div&gt;`"
  },
  {
    "objectID": "repo.html#r-universe-summary",
    "href": "repo.html#r-universe-summary",
    "title": "Repositories",
    "section": "R-universe summary",
    "text": "R-universe summary\n\nbuild_url = is_on_r_univ ? r_univ_builds[0]['buildurl'] : undefined;\n\nbuild_checks = is_on_r_univ ? r_univ_builds.filter(d =&gt; (d['status'] !== \"success\")) : [];\nbuild_checks_okay = build_checks.length == 0;\n\nis_on_r_univ ?\nhtl.html`&lt;div&gt;Links to\n&lt;a href=\"https://${r_univ_universe}.r-universe.dev/${r_univ_package}\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;i&gt;${r_univ_package}&lt;/i&gt; on R-universe&lt;/a&gt;\nand to\n&lt;a href=\"${build_url}\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;recent R-universe builds&lt;/a&gt;.\n&lt;/div&gt;` :\nhtl.html`&lt;div&gt;This package is not on R-universe&lt;/div&gt;`;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtl.html`&lt;div style=\"margin-top: 10px; margin-bottom: 10px;\"&gt;&lt;/div&gt;`\n\n\n\n\n\n\n\nis_on_r_univ ?\n    (build_checks_okay ?\n        htl.html`&lt;div&gt;&#9989; All recent R-universe builds were successful&lt;/div&gt;` :\n        htl.html`&lt;div&gt;&#10060; Some recent R-universe builds were unsuccessful&lt;/div&gt;`) :\n    htl.html`&lt;div&gt;&lt;/div&gt;`;\n\n\n\n\n\n\n\nr_univ_jobs_table = is_on_r_univ ?\n    Inputs.table(r_univ_jobs, {\n        columns: [\"job\", \"config\", \"r\", \"check\"],\n        format: {\n            job: d =&gt; htl.html`&lt;a href=\"${build_url}/job/${d}\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;${d.toFixed(0)}&lt;/a&gt;`,\n        },\n    }) : htl.html`&lt;div&gt;&lt;/div&gt;`;\n\nis_on_r_univ ?\nhtl.html`&lt;div style=\"margin-top: 10px;\"&gt;&lt;details&gt;&lt;summary&gt;Recent R-Universe Jobs&lt;/summary&gt;${r_univ_jobs_table}&lt;/details&gt;&lt;/div&gt;` : htl.html`&lt;div&gt;&lt;/div&gt;`;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nis_on_r_univ && !build_checks_okay ? htl.html`&lt;h3&gt;Recent Builds&lt;/h3&gt;` : htl.html`&lt;div&gt;&lt;/div&gt;`;\n\n\n\n\n\n\n\nis_on_r_univ && !build_checks_okay ?\n    htl.html`&lt;div&gt;&lt;a href=${build_url}&gt;The following recent builds were unsuccessful&lt;/a&gt;&lt;/div&gt;` :\n    htl.html`&lt;div&gt;&lt;/div&gt;`;\n\n\n\n\n\n\n\nis_on_r_univ && !build_checks_okay?\n    Inputs.table(build_checks, {\n        columns: [\"r\", \"os\", \"status\", \"check\"],\n    }) : htl.html`&lt;div&gt;&lt;/div&gt;`;"
  },
  {
    "objectID": "repo.html#cran-summary",
    "href": "repo.html#cran-summary",
    "title": "Repositories",
    "section": "CRAN Summary",
    "text": "CRAN Summary\n\ncran_txt = has_cran_data ? \"currently list these issues:\" : \"are all good\";\ncran_url = \"https://cran.r-project.org/web/checks/check_results_\" + repo + \".html\";\nnot_on_cran ?\n    htl.html`&lt;div&gt;This package is not on CRAN&lt;/div&gt;` :\n    htl.html`&lt;div&gt;&lt;a href=\"${cran_url}\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;CRAN checks&lt;/a&gt; on this package ${cran_txt}&lt;/div&gt;`;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtl.html`&lt;div style=\"margin-top: 20px; margin-bottom: 20px;\"&gt;&lt;/div&gt;`\n\n\n\n\n\n\n\nhas_cran_data ?\n    Inputs.table(cran_data, {\n        columns: [\"package\", \"version\", \"result\", \"check\", \"message\"],\n        format: {\n            check: d =&gt; htl.html`&lt;span style=\"white-space:normal\"&gt;${d}`,\n            message: d =&gt; htl.html`&lt;span style=\"white-space:normal\"&gt;${d}`,\n        }\n    }) : htl.html`&lt;div&gt;&lt;/div&gt;`;"
  },
  {
    "objectID": "repo.html#statistical-properties",
    "href": "repo.html#statistical-properties",
    "title": "Repositories",
    "section": "Statistical properties",
    "text": "Statistical properties\nThis section shows some of the statistical properties of the code base, as generated by the pkgstats package. By default, only outlier values are shown, for which the “Limits” slider below can be used to reduce statistical properties to only those lying in the lower or upper percentiles of the specified value. The table uses the following abbreviations:\n\n“LOC” for Lines-of-Code\n“Nr.” for Number\n“fn” for function\n“Doc” for Documentation\n\n\nviewof statsLimit = Inputs.range(\n    [0,50],\n    {value: 10, step: 5, label: htl.html`&lt;b&gt;Limits:&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\n\n\n\npkgStatsData = {\n    return transpose(pkgcheck_stats_in[repo]).map(row =&gt; ({\n        ...row,\n    })).filter(function(m) {\n        return m.percentile &lt;= statsLimit || m.percentile &gt;= (100 - statsLimit)\n    });\n}\n\n\n\n\n\n\n\nInputs.table(pkgStatsData, {\n    format: {\n        percentile: sparkbar(100),\n        noteworth: null,\n    },\n    header: {\n        measure: \"Measure\",\n        value: \"Value\",\n        percentile: \"Percentile\"\n    }\n})"
  },
  {
    "objectID": "repo.html#function-usage-in-other-packages",
    "href": "repo.html#function-usage-in-other-packages",
    "title": "Repositories",
    "section": "Function usage in other packages",
    "text": "Function usage in other packages\n\nhas_fn_calls ? htl.html`&lt;div&gt;\nThe following table shows the number of times different functions are used in\nother packages. Numbers may be less than total numbers of packages listed above\nin &lt;q&gt;&lt;i&gt;Dependencies: Used by org pkgs&lt;/i&gt;&lt;/q&gt; because some of those usages may be only\nin tests, whereas the following usage counts are within actual R code only.\n&lt;/div&gt;` :\nhtl.html`&lt;div&gt;This package uses no other packages from the organizations,\nand so its functions are not used anywhere else.&lt;/div&gt;`;\n\n\n\n\n\n\n\n\n\n\nhas_fn_calls ? Inputs.table(fn_calls, {\n    columns: [\"fn_name\", \"n\"],\n    header: {\n        fn_name: \"Function name\",\n        n: \"Usage\"\n    }\n}) : htl.html`&lt;div&gt;&lt;/div&gt;`;"
  },
  {
    "objectID": "repo.html#chaoss-metrics-and-models",
    "href": "repo.html#chaoss-metrics-and-models",
    "title": "Repositories",
    "section": "CHAOSS metrics and models",
    "text": "CHAOSS metrics and models\n\nurl_chaoss = \"https://chaoss.community/kb-metrics-and-metrics-models/\";\nurl_chaoss_models = \"https://chaoss.community/kbtopic/all-metrics-models/\";\nurl_chaoss_metrics = \"https://chaoss.community/kbtopic/all-metrics/\";\n\nhtl.html`&lt;div&gt;\nThis section highlights important &lt;a href=\"${url_chaoss}\" target=\"_blank\"&gt;\nCHAOSS (&lt;i&gt; Community Health Analytics in Open Source Software&lt;/i&gt;)&lt;/a&gt; metrics\nand models for the\n&lt;a href=${repoURL} target=\"_blank\"&gt;&lt;i&gt;${repo}&lt;/i&gt; repository&lt;/a&gt;.\nThe first graph shows\n&lt;q&gt;&lt;a href=${url_chaoss_models} target=\"_blank\"&gt;models&lt;/a&gt;&lt;/q&gt;,\nwhich are aggregations of\n&lt;a href=${url_chaoss_metrics} target=\"_blank\"&gt;metrics&lt;/a&gt;\ninto conceptual or thematic groups, and the second provides more detail into\nindividual metrics. All values are standardised between 0 and 1 such that\nhigher values are always better than lower values.\n&lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy default, the following charts of both models and metrics only show categories for which the repository is an outlier, defined as lying in the lower or upper 10% of all repositories. Note that these outlier proportions depend on distributions of values measured across all repositories, and will generally not correspond values beyond the limits of [10, 90]% on the scale shown. For example, values for metrics of models may be very concentrated around 0.5 with only a very few extreme values. The lower 10% of values may, for example, be all those below a value of 0.4. Clicking on the following button will toggle to display all values.\nThe model names shown on the bars are hyperlinked; clicking on any will take you to the model definitions on the CHAOSS Models pages.\n\nPlot = import(\"https://esm.sh/@observablehq/plot\");\n\n\n\n\n\n\n\nviewof outliersOnly = Inputs.radio(\n    [\"true\", \"false\"],\n    {\n        value: \"true\",\n        label: htl.html`&lt;b&gt;Outliers only:&lt;/b&gt;`,\n    }\n)\n\n\n\n\n\n\n\nCHAOSS Models\n\nrm_metrics_models = json_data['rm_metrics_models'];\nrm_models = rm_metrics_models['models'];\nrm_model_text = rm_metrics_models['model_names'];\nmodelsTextMap = rm_model_text.reduce((map, item) =&gt; {\n    return map.set(String(item.name), item.airtable_name);\n}, new Map());\nrm_metrics = rm_metrics_models['metrics'];\nmetricsTextMap = rm_metrics.reduce((map, item) =&gt; {\n    return map.set(String(item.name), item.airtable_name);\n}, new Map());\nmetricsUrlMap = rm_metrics.reduce((map, item) =&gt; {\n    return map.set(String(item.name), item.url);\n}, new Map());\nmodelsUrlMap = rm_model_text.reduce((map, item) =&gt; {\n    return map.set(String(item.name), item.url);\n}, new Map());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodelsAll = {\n    return transpose(models_in).map(row =&gt; {\n        const key = String(row.name);\n        const keyUrl = modelsUrlMap.has(key) ? modelsUrlMap.get(key) :\n            \"https://chaoss.community/kbtopic/all-metrics-models/\";\n        return {\n            ...row,\n            url: keyUrl\n        }\n    });\n}\n\nmodelRepoVarnames = modelsAll.filter(function(mod) {\n    return mod.package === repo && mod.name !== \"final\"\n})\n\nmodelRepoAll = modelRepoVarnames.map(item =&gt; {\n    const key = String(item.name);\n    return {\n        ...item,\n        name: modelsTextMap.has(key) ? modelsTextMap.get(key) : item.name\n    }\n})\n\nmetricsAll = metricsTranspose.map(item =&gt; {\n    const key = String(item.name);\n    return {\n        ...item,\n        name: metricsTextMap.has(key) ? metricsTextMap.get(key) : item.name,\n        url: metricsUrlMap.has(key) ? metricsUrlMap.get(key) : item.url\n    }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodelRepoFilt = outliersOnly === \"true\" ?\n    modelRepoAll.filter(function(m) {\n        return m.outlier === true;\n    }) : modelRepoAll;\nmodelRepoLen = modelRepoFilt.length;\noneBarHeight = 20;\nmodelPlotHeight = modelRepoLen * oneBarHeight + 100;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfullScaleValues = modelRepoAll.map(d =&gt; d.value);\nminVal = Math.min(...fullScaleValues);\nmaxVal = Math.max(...fullScaleValues);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: modelPlotHeight,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Model Scores\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(modelRepoFilt, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(modelRepoFilt,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(modelRepoFilt, {\n            x: d =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: d =&gt; d.name,\n            text: d =&gt; d.name,\n            href: d =&gt; d.url,\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"linear\",\n        domain: [minVal, maxVal]\n    }\n})\n\n\n\n\n\n\n\n\nCHAOSS metrics\nThis graph provides more detailed insight into the state of the selected repository, through showing values for individual CHAOSS metrics used to inform the aggregate models. As for models, the names of the metrics are hyperlinked to the CHAOSS definitions, many of which are for general collections of metrics.\n\nmetrics = outliersOnly === \"true\" ?\n    metricsAll.filter(function(m) {\n        return m.outlier === true;\n    }) : metricsAll;\n\nmetricsRepo = metrics.filter(function(mod) {\n    return mod.package === repo\n})\n\nmetricsPlotHeight = metricsRepo.length * oneBarHeight + 100;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: metricsPlotHeight,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Metric Scores\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(metricsRepo, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(metricsRepo,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(metricsRepo, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: d =&gt; d.name,\n            text: d =&gt; d.name,\n            href: d =&gt; d.url,\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  }
]