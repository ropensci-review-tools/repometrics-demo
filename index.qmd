---
title: "EpiVerse Organizational Overview"
execute:
  echo: false
format:
  html:
    theme: yeti
---

```{r libraries, message = FALSE}
library (bslib)
library (bsicons)
library (htmltools)
library (plotly)
```

```{r valuebox-values}
repo_data <- readRDS (fs::path ("data", "results-data-repo-src.Rds"))
annual_commits <- readRDS (fs::path ("data", "results-annual-commits.Rds"))
annual_gh_activity <- readRDS (fs::path ("data", "results-annual-gh-activity.Rds"))
annual_gh_activity$total <- rowSums (annual_gh_activity [, -1])
num_repos <- nrow (repo_data)
repo_orgs <- gsub ("\\/.*$", "", repo_data$orgrepo) |>
    table () |>
    sort (decreasing = TRUE) |>
    head (n = 3L)
```


```{r}
# This code identifies packages with high community engagement yet low
# developer responsiveness. It identifies packages lying in the lower-right
# corner of the quadrant frormed by the regerssion and its perpendicular
# through the mid-point of the entire plane, and lying below the 90% CI.
ci_level <- 0.9
m <- readRDS (fs::path ("data", "results-maintenance-org.Rds")) |>
    dplyr::rename (x = comm_engage, y = dev_resp) |>
    dplyr::filter (date == max (date)) |>
    dplyr::select (-date)
x_mid <- min (m$x) + diff (range (m$x)) / 2
y_mid <- min (m$y) + diff (range (m$y)) / 2

mod <- lm (y ~ x, data = m)
slope <- coefficients (mod) [2]
intercept <- coefficients (mod) [1]
perp_slope <- -1 / slope
perp_intercept <- y_mid - perp_slope * x_mid

ci <- predict (mod, interval = "confidence", level = ci_level) |>
    as.data.frame ()
data <- cbind (m, ci) |>
    dplyr::mutate (
        below_ci = y < lwr,
        pos_reg = y - (slope * x + intercept),
        pos_perp = y - (perp_slope * x + perp_intercept),
        index_lr_quad = pos_reg < 0 & pos_perp > 0,
        target_points = index_lr_quad & below_ci
    ) |>
    dplyr::filter (target_points) |>
    dplyr::select (package, x, y) |>
    dplyr::rename (comm_engage = x, dev_resp = y)
repo_urls <- repo_data |>
    dplyr::select (package, url)
data <- dplyr::left_join (data, repo_urls, by = "package")

npkgs_requiring_maintenance <- nrow (data)

# library (ggplot2)
# ggplot (m, aes (x = x, y = y)) +
#     geom_point (cex = 2, col = "yellow") +
#     geom_smooth (method = "lm", formula = "y ~ x", se = TRUE) +
#     geom_abline (slope = perp_slope, intercept = perp_intercept, col = "blue", lty = 2) +
#     geom_point (data = data, col = "red", cex = 2) +
#     ggplot2::theme_minimal ()
```



```{r}
lines <- paste0 (unname (repo_orgs), " from ", names (repo_orgs))
bslib::page_fillable (
    bslib::layout_columns (
        bslib::value_box (
            full_screen = FALSE,
            fill = TRUE,
            title = "There are",
            value = paste0 (format (num_repos, big.mark = ","), " repositories"),
            showcase = bsicons::bs_icon ("clipboard-data"),
            showcase_layout = "top right",
            theme = "bg-gradient-blue-orange",
            htmltools::p ("including"),
            htmltools::p (bsicons::bs_icon ("1-square"), lines [1]),
            htmltools::p (bsicons::bs_icon ("2-square"), lines [2]),
            htmltools::p (bsicons::bs_icon ("3-square"), lines [3])
        ),
        bslib::value_box (
            full_screen = FALSE,
            fill = FALSE,
            title = "Urgent maintance required on",
            value = paste0 (npkgs_requiring_maintenance, " packages"),
            # showcase = bsicons::bs_icon ("heart-pulse"),
            showcase = bsicons::bs_icon ("tools"),
            showcase_layout = "top right",
            htmltools::div (
                htmltools::p (paste0 (
                    "with high community engagement, ",
                    "yet low developer responsiveness:"
                )),
                htmltools::br (),
                if (nrow (data) == 1L) {
                    tags$p (
                        bsicons::bs_icon ("caret-right"),
                        tags$a (
                            href = "/repo.html",
                            onclick = sprintf ("localStorage.setItem('orgmetricsRepo', '%s')", data$package),
                            data$package
                        )
                    )
                } else {
                    htmltools::tagList (
                        lapply (seq_len (nrow (data)), function (i) {
                            tags$p (
                                bsicons::bs_icon ("caret-right"),
                                tags$a (
                                    href = "/repo.html",
                                    onclick = sprintf ("localStorage.setItem('orgmetricsRepo', '%s')", data$package [i]),
                                    data$package [i]
                                )
                            )
                        })
                    )
                }
            ),
            theme = "bg-yellow"
        ),
        col_widths = c (6, 6)
    )
)
```



```{r sparkline-plot-commits, echo = FALSE}
sparkline_plot_commits_in <- function (annual_commits) {
    x <- as.integer (annual_commits$year)
    y <- annual_commits$num_commits
    x_lim <- range (x)
    y_lim <- c (0, max (y) * 1.05)

    par (mar = c (3, 0, 0, 0), bg = "#20c997")
    plot (
        x,
        y,
        type = "n",
        axes = FALSE,
        frame.plot = FALSE,
        ylim = y_lim,
        xlim = x_lim,
        ylab = "",
        xlab = "",
        yaxs = "i",
        xaxs = "i",
    )

    lines (x, y, type = "l", pch = NA, col = "#0B538E", lwd = 3)

    polygon_x <- c (x [1], x, x [length (x)])
    polygon_y <- c (0, y, 0)

    polygon (polygon_x, polygon_y, col = "#e6f2fd", border = NA)
}
sparkline_plot_commits <- function () {
    as_fill_item (
        htmltools::plotTag (
            sparkline_plot_commits_in (annual_commits),
            suppressSize = "xy",
            alt = "sparkline plot of annual numbers of commits."
        )
    )
}
```

```{r sparkline-plot-gh, echo = FALSE}
sparkline_plot_gh_in <- function (annual_gh) {
    x <- as.integer (annual_gh$year)
    y <- annual_gh$total
    x_lim <- range (x)
    y_lim <- c (0, max (y) * 1.05)

    par (mar = c (3, 0, 0, 0), bg = "#20c997")
    plot (
        x,
        y,
        type = "n",
        axes = FALSE,
        frame.plot = FALSE,
        ylim = y_lim,
        xlim = x_lim,
        ylab = "",
        xlab = "",
        yaxs = "i",
        xaxs = "i",
    )

    lines (x, y, type = "l", pch = NA, col = "#0B538E", lwd = 3)

    polygon_x <- c (x [1], x, x [length (x)])
    polygon_y <- c (0, y, 0)

    polygon (polygon_x, polygon_y, col = "#e6f2fd", border = NA)
}
sparkline_plot_gh <- function () {
    as_fill_item (
        htmltools::plotTag (
            sparkline_plot_gh_in (annual_gh_activity),
            suppressSize = "xy",
            alt = "sparkline plot of annual GitHub activity."
        )
    )
}
```

```{r echo = FALSE, message = TRUE}
lines <- paste0 (unname (repo_orgs), " from ", names (repo_orgs))
bslib::page_fillable (
    bslib::layout_columns (
        bslib::value_box (
            title = "Total commits:",
            value = format (sum (annual_commits$num_commits), big.mark = ","),
            htmltools::p (
                "between ",
                min (as.integer (annual_commits$year)),
                " and ",
                max (as.integer (annual_commits$year))
            ),
            htmltools::p ("(Plot below shows time series)"),
            showcase = sparkline_plot_commits (),
            showcase_layout = "bottom",
            theme = "bg-teal"
        ),
        value_box (
            title = "GitHub Activity",
            value = format (sum (annual_gh_activity$total), big.mark = ","),
            htmltools::p (
                "Total issues, comments, and pull requests"
            ),
            showcase = sparkline_plot_gh (),
            showcase_layout = "bottom",
            theme = "bg-teal"
        ),
        col_widths = c (6, 6),
    )
)
```


<!--- ----------------------------------------------------- --->

-----

This dashboard presents metrics and models for each repository within both the
[`epiverse-trace`](https://github.com/epiverse-trace),
[`reconhub`](https://github.com/reconhub), and
[`reconverse`](https://github.com/reconverse) GitHub organizations. It is
intended to demonstrate the kinds of analyses and insights that are possible,
and is expected to change and develop a lot. Please provide feedback via GitHub
by clicking on the symbol on the top right.

The dashboard currently has four main pages:

1. An [organization maintenance](./org.html) page identifying maintenance
   priorities across all repositories within all organizations.
2. A [repository maintenance](./repo.html) page providing additional
   detail on maintenance needs of any selected repository.
3. A [maintainer](/maintainer.html) page with details of individual
   maintainers, their packages and co-maintainers.
4. A [*Community Health*](./models.html) providing additional detail on scores
   for the various [CHAOSS (*Community Health Analytics in Open Source
    Software*) models and
    metrics](https://chaoss.community/kb-metrics-and-metrics-models/) for each
    repository.

## Maintenance Priorities

This section links to repositories with distinct maintenance priorities.

```{r}
# Code to get outlier metrics for packages identified as having maintenance
# priorities:
threshold <- 0.8
threshold <- 0.5 + threshold / 2
num_sds <- qnorm (threshold, 0, 1)
data_metrics <- readRDS (fs::path ("data", "results-metrics.Rds"))
# which.max does not work for dates, but max does
index1 <- which (names (data_metrics) == max (names (data_metrics)))
limits <- data_metrics [[index1]] |>
    dplyr::group_by (name) |>
    dplyr::filter (!is.na (value)) |>
    dplyr::summarise (
        lower = mean (value) - num_sds * sd (value),
        upper = mean (value) + num_sds * sd (value)
    )
m <- data_metrics [[index1]] |>
    dplyr::left_join (limits, by = "name") |>
    dplyr::group_by (name) |>
    dplyr::filter (!is.na (value)) |>
    dplyr::mutate (below = value < lower) |>
    dplyr::select (-lower, -upper) |>
    dplyr::filter (below) |>
    dplyr::arrange (name) |>
    dplyr::left_join (repo_urls, by = "package", relationship = "many-to-many")

# Then reduce to only the identified outlier packages:
m <- dplyr::filter (m, package %in% data$package) |>
    dplyr::group_by (package)

# Update metrics names to descriptions:
rm_metrics_json <- system.file (
    "extdata",
    "metrics-models",
    "metrics-models.json",
    package = "repometrics"
) |>
    jsonlite::read_json (simplify = TRUE)
rm_metrics_dat <- rm_metrics_json$metrics
m$name <- rm_metrics_dat$airtable_name [match (m$name, rm_metrics_dat$name)]

metrics <- unique (m$name)
metrics_data <- lapply (metrics, function (i) {
    list (
        h = i,
        text = m$package [which (m$name == i)],
        url = m$url [which (m$name == i)]
    )
})
```



```{r}
# NOTE that the href values here are filled with the sub-domain when deployed,
# so DO NOT need to be modified!
bslib::page_fillable (
    lapply (metrics_data, function (i) {
        htmltools::div (
            htmltools::h3 (i$h),
            if (length (i$text) == 1L) {
                tags$p (
                    bsicons::bs_icon ("caret-right"),
                    tags$a (
                        href = "/repo.html",
                        onclick = sprintf ("localStorage.setItem('orgmetricsRepo', '%s')", i$text),
                        i$text
                    )
                )
            } else {
                htmltools::tagList (lapply (seq_along (i$text), function (j) {
                    tags$p (
                        bsicons::bs_icon ("caret-right"),
                        tags$a (
                            href = "/repo.html",
                            onclick = sprintf ("localStorage.setItem('orgmetricsRepo', '%s')", i$text [j]),
                            i$text [j]
                        )
                    )
                }))
            },
            style = "padding-bottom: 1rem; padding-top: 0px; border-bottom: 1px solid #eee;"
        )
    })
)
```


-----
