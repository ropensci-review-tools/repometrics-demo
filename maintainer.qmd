---
title: "Maintainers"
execute:
  echo: false
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---


```{r load-data}
data_repo_src <- readRDS (fs::path ("data", "results-data-repo-src.Rds"))
ojs_define (repo_src_in = data_repo_src)
```

```{ojs load-json-data}
// -------- READ JS DATA
repo_src = {
    return transpose(repo_src_in).map(row => ({
        ...row,
    }));
}
json_data = FileAttachment("results-json-data.json").json();
maintainer_pkgs = json_data['maintainer_pkgs'];
comaintainers = json_data['comaintainers'];
maintainers = Object.keys(maintainer_pkgs);
```

<!---- break --->

```{ojs maintainer-select}
maintainerSet = localStorage.getItem("orgmetricsMaintainer") || maintainers[0];
viewof maintainer = Inputs.select(
    maintainers,
    {
        multiple: false,
        value: maintainerSet,
        label: htl.html`<b>Maintainer:</b>`
    }
)
s = localStorage.setItem("orgmetricsMaintainer", maintainer.toString());
```

<!---- break --->

```{ojs extract-maintainer-data}
these_pkgs = maintainer_pkgs[maintainer] || null;

these_pkgs_list = these_pkgs ?
these_pkgs.map(i => {
    const url = (repo_src.filter(function(r) {
        return r.package === i
    }, i)[0] || {}).url || null;
    return htl.html`
<li>
<div onclick=${() => localStorage.setItem('orgmetricsRepo', i)}>
<a href="/repometrics-demo/repo.html">${i}</a>
</div>
</li>`
}) : htl.html`<li>No packages listed</li>`;

these_cos = comaintainers[maintainer] || null
these_cos_list = these_cos ?
these_cos.map(i => htl.html`
<div onclick=${() => localStorage.setItem('orgmetricsMaintainer', i)}>
<li><a href="/repometrics-demo/maintainer.html">${i}</a></li>
</div>`) : htl.html`<li>No co-maintainers</li>`;
```

<div style="margin-top: 10px; margin-bottom: 10px;"></div>

```{ojs maintainer-link}
htl.html`<div><a href="https://github.com/${maintainer}" target="_blank">github.com/${maintainer}</a></div>`
```

## Packages

```{ojs packages-list}
htl.html`<ul>${these_pkgs_list}</ul>`
```


## Co-Maintainers

```{ojs comaintainers-list}
htl.html`<ul>${these_cos_list}</ul>`
```

## Network

```{ojs network-in}
// Connect co-maintainers to all of their packages:
pkgs_expanded_full = these_cos.map(i => maintainer_pkgs[i]).flat();
// Reduce to unique pkgs:
pkgs_expanded = [...new Set(pkgs_expanded_full)];

nodes = [
    { id: maintainer, group: "Maintainer", size: 10 },
    ...pkgs_expanded.map(item => ({
        id: item,
        group: these_pkgs.includes(item) ? "packages" : "otherPackages",
        size: these_pkgs.includes(item) ? 8 : 4,
    })),
    ...these_cos.map(item => ({ id: item, group: "Co-maintainer", size: 6 }))
];

// edges are mappings from co-maintainers to all packages. First collect list
// of all packages from co-maintainers:
these_co_pkgs = these_cos.reduce((acc, key) => {
    if (maintainer_pkgs.hasOwnProperty(key)) {
        if (!these_pkgs.includes(key)) {
            acc[key] = maintainer_pkgs[key];
        }
    }
    return acc;
}, {});
// Then flatten that to (source, target) pairs of (maintainer, package):
these_co_pkgs_flat = Object.entries(these_co_pkgs).flatMap(([source, targets]) =>
    targets.map(target => ({ source, target }))
);
links = [
    ...these_pkgs.map(item => ({
        source: maintainer, target: item, value: 4
    })),
    ...these_co_pkgs_flat.map(item => ({
        source: item.source, target: item.target, value: 2
    }))
];
```

<div style="margin-top: 20px; margin-bottom: 20px;"></div>


```{ojs swatches}
import {Swatches} from "@d3/color-legend"
Swatches(chart.scales.color)
```

```{ojs ForceGraph-plot}
strength = -400;
// console.log ("-----nodes: " + JSON.stringify(nodes));
// console.log ("-----links: " + JSON.stringify(links));

chart = {

    const width = 928;
    const height = 600;

    const types = Array.from(new Set(nodes.map(d => d.group)));

    const color = d3.scaleOrdinal(types, d3.schemeCategory10);

    const simulation = d3.forceSimulation(nodes)
        .force("link", d3.forceLink(links).id(d => d.id))
        .force("charge", d3.forceManyBody().strength(strength))
        .force("x", d3.forceX())
        .force("y", d3.forceY());

    const svg = d3.create("svg")
        .attr("viewBox", [-width / 2, -height / 2, width, height])
        .attr("width", width)
        .attr("height", height)
        .attr("style", "max-width: 100%; height: auto; font: 14px sans-serif;");

    const link = svg.append("g")
        .attr("fill", "none")
        .attr("stroke-width", 1.5)
        .selectAll("path")
        .data(links)
        .join("path")
            .attr("stroke", "gray")
            .attr("stroke-width", d => d.value);

    const node = svg.append("g")
        .selectAll("g")
        .data(nodes)
        .join("g")
            .call(drag(simulation));

    node.append("circle")
        .attr("stroke", "white")
        .attr("stroke-width", 1.5)
        .data(nodes)
        .join("circle")
            .attr("fill", d => color(d.group))
            .attr("r", d => d.size);

    node.append("text")
        .attr("x", 8)
        .attr("y", "0.31em")
        .text(d => d.id)
        .clone(true).lower()
            .attr("fill", "none")
            .attr("stroke", "white")
            .attr("stroke-width", 3);

    simulation.on("tick", () => {
        link.attr("d", linkArc);
        node.attr("transform", d => `translate(${d.x},${d.y})`);
    });

    invalidation.then(() => simulation.stop());

    return Object.assign(svg.node(), {scales: {color}});
}
```

```{ojs}
function linkArc(d) {
    const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);
    return `
    M${d.source.x},${d.source.y}
    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}
    `;
}
```

```{ojs}
drag = simulation => {

    function dragstarted(event, d) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }

    function dragged(event, d) {
        d.fx = event.x;
        d.fy = event.y;
    }

    function dragended(event, d) {
        if (!event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }

    return d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended);
}
```
