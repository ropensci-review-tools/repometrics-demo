[
  {
    "objectID": "chaoss-org.html",
    "href": "chaoss-org.html",
    "title": "Maintenance: Org",
    "section": "",
    "text": "This page details maintenance needs for each repository within the reconhub and epiverse-trace organizations. The initial section presents CHAOSS (Community Health Analytics in Open Source Software) models and metrics for each repository. The metrics are direct repository-level measures of a variety of aspects indicative of open-source community or repository health. The models represent higher level conceptual aggregations of metrics, designed by the CHAOSS community to represent important and more abstracted aspects of community health.\nThe single graph here converts the models into a single measure of “maintainer deficit”, which is a ratio of community engagement to developer responsiveness. The Community Health page provides full detail of individual models and metrics.\nFollowing that graph are several more distinct indicators of maintenance need, all of which are assessed over the previous year of repository activity:\nAll graphs on this page are displayed such that darker, more purple colours are worse than lighter, more green colours. Graphs are also generally displayed with repositories with greater maintenance need plotted near the top, and those with less maintenance need near the bottom (or not included at all)."
  },
  {
    "objectID": "chaoss-org.html#chaoss-metrics-and-models",
    "href": "chaoss-org.html#chaoss-metrics-and-models",
    "title": "Maintenance: Org",
    "section": "CHAOSS metrics and models",
    "text": "CHAOSS metrics and models\nThis page uses CHAOSS metrics and models to identify maintenance deficits across all repositories within the reconhub and epiverse-trace organizations. These deficits are higher for projects with more community engagement yet less developer responsiveness or activity. Repositories with higher maintenance deficits are presented first, with maintenance deficit decreasing down the page. Lengths of bars indicate community engagement minus developer responsiveness, so that:\n\nMore positive bars are higher up the page, and have high engagement yet lower developer responsiveness.\nMore negative bars are lower down the page, and have high developer activity yet low community engagement.\n\nBars are coloured to provide insight into the relative contributions of community engagement versus developer responsiveness. Because organizations generally have more direct control over the latter than the former, bars are coloured by developer responsiveness. This means that:\n\nBars with colours tending towards bright green have greater developer responsiveness.\nBars tending toward darker purple have lower developer responsiveness.\n\nMaintenance priorities should likely be focussed on repositories with high values of maintenance deficit yet lower levels of developer responsiveness. These repositories will be higher up in the graph (more positive values), yet with more dark purple colours.\n\nPlot = import(\"https://esm.sh/@observablehq/plot\")\n\n\n\n\n\n\n\nmodels = {\n    return transpose(models_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmodels_len = models.length;\n\nctb_change = {\n    return transpose(ctb_change_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nctb_change_len = ctb_change.length;\nctb_abs_repo = {\n    return transpose(ctb_abs_repo_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nctb_abs_repo_len = ctb_abs_repo.length;\nctb_abs_ctb = {\n    return transpose(ctb_abs_ctb_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nctb_abs_ctb_len = ctb_abs_ctb.length;\n\nissue_resp = {\n    return transpose(issue_resp_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nissue_resp_len = issue_resp.length;\nissue_bugs = {\n    return transpose(issue_bugs_in).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Maintenance Deficit\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models, {\n            y: \"package\",\n            x: \"maintenance\",\n            sort: {y: \"-x\" },\n            fill: \"dev_resp\",\n        }),\n        Plot.barX(models,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"maintenance\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"maintenance\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models, {\n            x: (d) =&gt; d.maintenance &lt; 0 ? 0 : d.maintenance,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "chaoss-org.html#proportion-of-bugs",
    "href": "chaoss-org.html#proportion-of-bugs",
    "title": "Maintenance: Org",
    "section": "Proportion of bugs",
    "text": "Proportion of bugs\nThis plot shows the proportion of all recent issues that are bug reports. Values are only shown for repositories for which &gt; 25% of all issues are bugs.\n\nissue_bugs_filt = issue_bugs.filter(function(i) {\n    return i.bugs &gt;= 0.25\n});\nbugs_len = issue_bugs_filt.length;\nissue_labs_filt = issue_bugs.filter(function(i) {\n    return i.labels &lt;= 0.5\n});\nlabs_len = issue_labs_filt.length;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * bugs_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Proportion Bugs\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(issue_bugs_filt, {\n            y: \"repo\",\n            x: \"bugs\",\n            sort: {y: \"-x\" },\n            fill: \"bugs\",\n        }),\n        Plot.barX(issue_bugs_filt,\n            Plot.pointer(\n            {\n                y: \"repo\",\n                x: \"bugs\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"bugs\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(issue_bugs_filt, {\n            x: \"bugs\",\n            y: \"repo\",\n            text: \"repo\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\",\n        reverse: true\n    }\n})"
  },
  {
    "objectID": "chaoss-org.html#issue-labelling",
    "href": "chaoss-org.html#issue-labelling",
    "title": "Maintenance: Org",
    "section": "Issue labelling",
    "text": "Issue labelling\nAnd this shows the proportion of all issues that are labelled. Values are only shown for repositories with poor issue labelling (&lt; 50%).\n\nPlot.plot({\n    height: 20 * labs_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Proportion Labelled\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(issue_labs_filt, {\n            y: \"repo\",\n            x: \"labels\",\n            sort: {y: \"x\" },\n            fill: \"labels\",\n        }),\n        Plot.barX(issue_labs_filt,\n            Plot.pointer(\n            {\n                y: \"repo\",\n                x: \"labels\",\n                sort: {y: \"x\" },\n                stroke: \"gray\",\n                fill: \"labels\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(issue_labs_filt, {\n            x: \"labels\",\n            y: \"repo\",\n            text: \"repo\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "chaoss-org.html#issue-response-time",
    "href": "chaoss-org.html#issue-response-time",
    "title": "Maintenance: Org",
    "section": "Issue response time",
    "text": "Issue response time\nThis graph shows average response times (in days) to issues reported by people other than main repository maintainers.\n\nPlot.plot({\n    height: 20 * issue_resp_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Issue response time (days)\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(issue_resp, {\n            y: \"repo\",\n            x: \"response\",\n            sort: {y: \"-x\" },\n            fill: \"response\",\n        }),\n        Plot.barX(issue_resp,\n            Plot.pointer(\n            {\n                y: \"repo\",\n                x: \"response\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"response\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(issue_resp, {\n            x: \"response\",\n            y: \"repo\",\n            text: \"repo\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\",\n        reverse: true\n    }\n})"
  },
  {
    "objectID": "chaoss-org.html#contributor-absence",
    "href": "chaoss-org.html#contributor-absence",
    "title": "Maintenance: Org",
    "section": "Contributor Absence",
    "text": "Contributor Absence\nThe next two graphs show a metric of main contributor absence. Values are only shown for which main contributors have not recently contributed. The metric is the proportion of overall commits made by now absent contributors.\n\nAbsence for repositories\n\nPlot.plot({\n    height: 20 * ctb_abs_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Proportion of overall commits\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(ctb_abs_repo, {\n            y: \"repo\",\n            x: \"measure\",\n            sort: {y: \"-x\" },\n            fill: \"measure\",\n        }),\n        Plot.barX(ctb_abs_repo,\n            Plot.pointer(\n            {\n                y: \"repo\",\n                x: \"measure\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"measure\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(ctb_abs_repo, {\n            x: \"measure\",\n            y: \"repo\",\n            text: \"repo\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\",\n        reverse: true\n    }\n})\n\n\n\n\n\n\n\n\nAbsence for Contributors\nValues are shown here for contributors who have been recently absent from repositories. Values are the maximal proportion of historical commits across all repositories from which they have been absent, with bars coloured by numbers of repositories, so darker, more purple colours indicate greater number of absent repositories.\n\nfullScaleValues = ctb_abs_ctb.map(d =&gt; d.n);\nminVal = Math.min(...fullScaleValues);\nmaxVal = Math.max(...fullScaleValues);\nPlot.plot({\n    height: 20 * ctb_abs_ctb_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Proportion of overall commits\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(ctb_abs_ctb, {\n            y: \"name\",\n            x: \"measure\",\n            sort: {y: \"-x\" },\n            fill: \"n\",\n        }),\n        Plot.barX(ctb_abs_ctb,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"measure\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"measure\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(ctb_abs_ctb, {\n            x: \"measure\",\n            y: \"name\",\n            text: \"name\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"linear\",\n        domain: [minVal, maxVal],\n        reverse: true\n    }\n})"
  },
  {
    "objectID": "chaoss-repo.html",
    "href": "chaoss-repo.html",
    "title": "Maintenance: Repo",
    "section": "",
    "text": "This page identifies maintenance priorities for a selected repository, in terms of both CHAOSS models, and the individual CHAOSS metrics which comprise those models. In its present state, this is mostly a proof-of-concept, and is not as well developed as the accompanying Organizational Maintenance page.\nThe “Outliers only” selector immediate below determines whether values shown for both models and metrics are outliers only (default of “true”), or whether all values are shown (“false”).\nPlot = import(\"https://esm.sh/@observablehq/plot\")\nmetricsTranspose = {\n    return transpose(metrics_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nrepo_src = {\n    return transpose(repo_src_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nctb_absTranspose = {\n    return transpose(ctb_abs_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nissue_respTranspose = {\n    return transpose(issue_resp_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nissue_bugsTranspose = {\n    return transpose(issue_bugs_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nreposAll = metricsTranspose.map(function(item) {\n    return item.package;\n});\nrepos = Array.from(new Set(reposAll));\nrepoSet = localStorage.getItem(\"orgmetricsRepo\") || repos [0]\nviewof repo = Inputs.select(\n    repos,\n    {\n        multiple: false,\n        value: repoSet,\n        label: htl.html`&lt;b&gt;Repository:&lt;/b&gt;`\n    }\n)\nlocalStorage.setItem(\"orgmetricsRepo\", repo.toString());\nrepoURL = repo_src.filter(function(r) {\n    return r.package === repo\n})[0].url;\nhtl.html`&lt;div&gt;Click here to see the &lt;a href=${repoURL} target=\"_blank\"&gt;${repo} repository&lt;/a&gt;.&lt;/div&gt;`\nviewof outliersOnly = Inputs.radio(\n    [\"true\", \"false\"],\n    {\n        value: \"true\",\n        label: htl.html`&lt;b&gt;Outliers only:&lt;/b&gt;`,\n    }\n)\nctb_abs = ctb_absTranspose.filter(function(r) {\n    return r.repo === repo\n})\nissue_resp = issue_respTranspose.filter(function(r) {\n    return r.repo === repo\n})\nissue_bugs = issue_bugsTranspose.filter(function(r) {\n    return r.repo === repo\n})"
  },
  {
    "objectID": "chaoss-repo.html#chaoss-models",
    "href": "chaoss-repo.html#chaoss-models",
    "title": "Maintenance: Repo",
    "section": "CHAOSS models",
    "text": "CHAOSS models\nThis first graph shows scores for the various CHAOSS (Community Health Analytics in Open Source Software) models for a selected repository. Each of these models is an aggregation of several underlying metrics, which can be examined in the following sub-section.\n\nmodels_all = {\n    return transpose(models_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmodels_final = models_all.filter(function(mod) {\n    return mod.name === \"final\"\n})\nmodel_repoAll = models_all.filter(function(mod) {\n    return mod.package === repo && mod.name !== \"final\"\n})\nmodel_repo = outliersOnly === \"true\" ?\n    model_repoAll.filter(function(m) {\n        return m.outlier === true;\n    }) : model_repoAll;\nmodel_repo_len = model_repo.length\nmodel_repo_ht_mult = model_repo_len &lt; 10 ? 80 : 40\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfullScaleValues = model_repoAll.map(d =&gt; d.value);\nminVal = Math.min(...fullScaleValues);\nmaxVal = Math.max(...fullScaleValues);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: model_repo_ht_mult * model_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Model Scores\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(model_repo, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(model_repo,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(model_repo, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"name\",\n            text: \"name\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"linear\",\n        domain: [minVal, maxVal]\n    }\n})"
  },
  {
    "objectID": "chaoss-repo.html#chaoss-metrics",
    "href": "chaoss-repo.html#chaoss-metrics",
    "title": "Maintenance: Repo",
    "section": "CHAOSS metrics",
    "text": "CHAOSS metrics\nThis graph provides more detailed insight into the state of the selected repository, through showing values for individual CHAOSS metrics used to inform the aggregate models.\n\nmetrics = outliersOnly === \"true\" ?\n    metricsTranspose.filter(function(m) {\n        return m.outlier === true;\n    }) : metricsTranspose;\n\nmetrics_repo = metrics.filter(function(mod) {\n    return mod.package === repo\n})\nmetrics_repo_len = metrics_repo.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 40 * metrics_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Metric Scores\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(metrics_repo, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(metrics_repo,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(metrics_repo, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"name\",\n            text: \"name\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EpiVerse Organizational Overview",
    "section": "",
    "text": "There are\n77 repositories\nincluding\n\n\n\n39 from epiverse-trace\n\n\n\n\n33 from reconhub\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTotal commits:\n20,859\n\nbetween \n2014\n and \n2025\n\n(Plot below shows time series)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGitHub Activity\n15,468\nTotal issues, comments, and pull requests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUrgent maintance required on\n7 packages\n\nwith high community engagement, yet low developer responsiveness:\n\n\n\nsandpaper\n\n\n\nincidence\n\n\n\noutbreaker2\n\n\n\nvarnish\n\n\n\nlearn\n\n\n\nepicontacts\n\n\n\nsivirep\n\n\n\n\n\n\n\n\n\n\nMaintenance priorities:\n\n\nPotentially excessive dependencies:\n\n\nepi-training-kit\n\n\n\nepicookbook\n\n\n\nhowto\n\n\n\npersonas\n\n\n\nresearch-compendium\n\n\n\nvarnish\n\n\n\nLacking continuous integration:\n\n\nSeverity_methods_assessment\n\n\n\ncontactsim\n\n\n\ndatacomparator\n\n\n\nepicookbook\n\n\n\nepinetwork\n\n\n\nrecon.ui\n\n\n\nshinyHelpers\n\n\n\nHigh ratio of issues-to-PRs:\n\n\nepiparameterDB\n\n\n\nLow number of maintainers:\n\n\nepinetwork\n\n\n\nepishiny\n\n\n\nggpyramid\n\n\n\ngisfirstaid\n\n\n\nhowto\n\n\n\nnumberize\n\n\n\npersonas\n\n\n\nresearch-compendium\n\n\n\nrmdscaffold\n\n\n\nLow test coverage:\n\n\ndibbler\n\n\n\netdev\n\n\n\ntracetheme\n\n\n\nvimes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis dashboard presents metrics and models for each repository within both the epiverse-trace and reconhub GitHub organizations. It is intended to demonstrate the kinds of analyses and insights that are possible. It is intended to change and develop a lot. Please provide feedback via GitHub by clicking on the symbol on the top right.\nThe dashboard currently has three main pages:\n\nAn organization maintenance page identifying maintenance priorities across all repositories.\nA repository maintenance page providing additional detail on maintenance needs of a selected repository.\nA Community Health summarising scores for the various CHAOSS (Community Health Analytics in Open Source Software) models and metrics for each repository.\n\nThere is also an additional network diagram page, showing strengths of relationship between each repository."
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "Community Health",
    "section": "",
    "text": "The Organizational Maintenance and Repository Maintenance pages provide various insights into maintenance deficits and needs across the whole organization and within individual repositories. This page provides more detail on the various CHAOSS (Community Health Analytics in Open Source Software) models used to generate values shown on those two pages. Each of these conceptual models aggregates various individual metrics, and aims to synthesise prominent aspects of community health. This page provides insights into a range of those models, assessed for each repository in the epiverse-trace and reconhub GitHub organizations. Details of individual metrics can be seen on the Repository Maintenance page."
  },
  {
    "objectID": "models.html#aggregate-community-health",
    "href": "models.html#aggregate-community-health",
    "title": "Community Health",
    "section": "Aggregate Community Health",
    "text": "Aggregate Community Health\nThis page shows aggregate community health scores for all repositories within the reconhub and epiverse-trace organizations. Higher values describe repositories with greater community health scores. Values for individual models are standardised across all repositories to have mean values of zero and standard deviations of one. These results are aggregated across thirteen distinct models, leading to maximal aggregated values slightly exceeding that value.\n\nPlot = import(\"https://esm.sh/@observablehq/plot\")\n\n\n\n\n\n\n\nmodels_all = {\n    return transpose(models_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmodels_final = models_all.filter(function(mod) {\n    return mod.name === \"final\"\n})\nmodels_len = models_final.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models_final, {\n            y: \"package\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(models_final,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models_final, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "models.html#individual-models-of-community-health",
    "href": "models.html#individual-models-of-community-health",
    "title": "Community Health",
    "section": "Individual models of community health",
    "text": "Individual models of community health\nThe following section shows values for each individual model of community health for all repositories.\n\ncommHealthVars = [\n    \"collab_devel_index\",\n    \"comm_serv_support\",\n    \"comm_welcoming\",\n    \"community_activity\",\n    \"dev_responsiveness\",\n    \"oss_compliance\",\n    \"proj_awareness\",\n    \"proj_engagement\",\n    \"starter_health\",\n    \"viability_community\",\n    \"viability_gov\",\n    \"viability_starter\",\n    \"viability_strategy\"\n]\nviewof commHealthVar = Inputs.select(\n    commHealthVars,\n    { multiple: \"false\", label: \"Community Health Variable\" }\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodels_filtered = models_all.filter(function(mod) {\n    return mod.name === commHealthVar\n})\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models_filtered, {\n            y: \"package\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(models_filtered,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models_filtered, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "models.html#community-health-for-individual-repositories",
    "href": "models.html#community-health-for-individual-repositories",
    "title": "Community Health",
    "section": "Community health for individual repositories",
    "text": "Community health for individual repositories\nThe following section shows all models of community health for a selected repository.\n\nreposAll = models_all.map(function(item) {\n    return item.package;\n});\nrepos = Array.from(new Set(reposAll));\nrepoSet = localStorage.getItem(\"orgmetricsRepo\") || repos [0]\nviewof repo = Inputs.select(\n    repos,\n    {\n        multiple: false,\n        value: repoSet,\n        label: htl.html`&lt;b&gt;Repository:&lt;/b&gt;`\n    }\n)\nlocalStorage.setItem(\"orgmetricsRepo\", repo.toString());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel_repo = models_all.filter(function(mod) {\n    return mod.package === repo && mod.name !== \"final\"\n})\nmodel_repo_len = model_repo.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 40 * model_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(model_repo, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(model_repo,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(model_repo, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"name\",\n            text: \"name\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "network.html",
    "href": "network.html",
    "title": "Network",
    "section": "",
    "text": "This page shows an interactive network diagram of “epiverse” packages, intended to demonstrate possible ways to view relationships between packages. The page will likely be updated to present two separate network diagrams, one for relationships between packages, to enable visual identification of the centrality of individual packages, and one for relationships between people.\nIn current form, the main functional component is the slider for “*Dependencies vs Code Similarity”. This controls the thickness of lines connecting packages, with lines only shown for packages which have direct dependencies on one another.\n\nFor a value of zero, lines directly reflect (relative) numbers of function calls made from one package (in orange) to another (in blue).\nFor a value of one, lines are scaled by how different the code within each pair of packages is, with thinner lines for more similar packages.\n\nThese two kinds of relationships can be taken together to indicate more important packages as those which are both used by many other packages, and are notably different from other packages. Thus important relationships are those for which lines which remain thick regardless of the value selected with this slider.\n\n\n\n\n\nnodesAll = {\n    return transpose(nodes_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nlinksAll = {\n    return transpose(links_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nnodesAllEmb = {\n    return transpose(nodes_in_emb).map(row =&gt; ({\n        ...row,\n    }));\n}\nlinksAllEmb = {\n    return transpose(links_in_emb).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof strength = Inputs.range(\n    [-2000,0],\n    {value: -400, step: 100, label: htl.html`&lt;b&gt;Force Strength:&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\nviewof linewidth = Inputs.range(\n    [1,10],\n    {value: 1, step: 1, label: htl.html`&lt;b&gt;Line Thickness:&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\nviewof deps_vs_emb = Inputs.range(\n    [0, 1],\n    {value: 0, step: 0.1, label: htl.html`&lt;b&gt;Dependencies (0) vs Code Similarity (1):&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\n\n\n\nnode_types = [\"depends\", \"uses\", \"isolated\"]\nviewof typeSelection = {\n    const input =  Inputs.checkbox(\n        node_types,\n        {\n            value: [\"depends\", \"uses\"],\n            label: htl.html`&lt;b&gt;Node types:&lt;/b&gt;`,\n        }\n    );\n\n    // Modification ideas from\n    // https://talk.observablehq.com/t/what-is-the-best-way-to-style-an-input-checkbox/7690/2\n    const scope = DOM.uid().id;\n    input.classList.add(scope);\n\n    input.append(htl.html`&lt;style&gt;\n    .${scope} &gt; div, .${scope} &gt; div label { display: flex; flex-wrap: wrap; gap: 10px; width: 300px }\n    `)\n\n    return input;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {Swatches} from \"@d3/color-legend\"\nSwatches(chart.scales.color)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchart = {\n\n  const width = 928;\n  const height = 600;\n\n  // linksAll has fewer (source, target) pairs than linksAllEmb, so create a\n  // lookup table of those pairs which do exist:\n  const linksAllEmbLookup = {};\n  linksAllEmb.forEach(obj =&gt; {\n    linksAllEmbLookup[`${obj.source},${obj.target}`] = obj.value;\n  });\n\n  // Then loop over all linksAllEmb, and add values for linksAll where they\n  // exist for same (source, target) pair. Note that obj1.value is embedding\n  // strength, while linksAllLookup holds dependency strength\n  const linksCombined = linksAll.map(obj =&gt; {\n      const key = `${obj.source},${obj.target}`;\n      return {\n          ...obj,\n          value: linksAllEmbLookup[key] ?\n            (1. - deps_vs_emb) * obj.value + deps_vs_emb * linksAllEmbLookup[key] : obj.value\n      };\n  });\n\n  // const nodes = nodesAllEmb.filter(function(node) {\n  //   return typeSelection.includes(node.group) || node.group.length === 0\n  // })\n  const nodes = nodesAll.filter(function(node) {\n    return typeSelection.includes(node.group) || node.group.length === 0\n  })\n  const links = linksCombined.filter(function(link) {\n    return typeSelection.includes(link.type) || link.type.length === 0\n  })\n  // const links = linksCombined.filter(function(link) {\n  //   return typeSelection.includes(link.type) || link.type.length === 0\n  // })\n\n  const types = Array.from(new Set(nodes.map(d =&gt; d.group)));\n\n  const color = d3.scaleOrdinal(types, d3.schemeCategory10);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(links).id(d =&gt; d.id))\n      .force(\"charge\", d3.forceManyBody().strength(strength))\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY());\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"style\", \"max-width: 100%; height: auto; font: 14px sans-serif;\");\n\n  // Per-type markers, as they don't inherit styles.\n  svg.append(\"defs\").selectAll(\"marker\")\n    .data(types)\n    .join(\"marker\")\n      .attr(\"id\", d =&gt; `arrow-${d}`)\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 15)\n      .attr(\"refY\", -0.5)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n    .append(\"path\")\n      .attr(\"fill\", color)\n      .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n  const link = svg.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke-width\", 1.5)\n    .selectAll(\"path\")\n    .data(links)\n    .join(\"path\")\n      .attr(\"stroke\", d =&gt; color(d.type))\n      .attr(\"stroke-width\", d =&gt; d.value * linewidth);\n\n  const node = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(nodes)\n    .join(\"g\")\n      .call(drag(simulation));\n\n  node.append(\"circle\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 1.5)\n      .data(nodes)\n      .join(\"circle\")\n        .attr(\"fill\", d =&gt; color(d.group))\n        .attr(\"r\", d =&gt; 10 * Math.log10(d.num_calls + 1));\n\n  node.append(\"text\")\n      .attr(\"x\", 8)\n      .attr(\"y\", \"0.31em\")\n      .text(d =&gt; d.id)\n      .html(d =&gt; `&lt;a href=\"https://github.com/${d.id}\" style=\"text-decoration:none\" target=\"_blank\"&gt;${d.id}&lt;/a&gt;`)\n    .clone(true).lower()\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 3);\n\n  simulation.on(\"tick\", () =&gt; {\n    link.attr(\"d\", linkArc);\n    node.attr(\"transform\", d =&gt; `translate(${d.x},${d.y})`);\n  });\n\n  invalidation.then(() =&gt; simulation.stop());\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\n\n\n\n\n\n\nfunction linkArc(d) {\n  const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);\n  return `\n    M${d.source.x},${d.source.y}\n    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}\n  `;\n}\n\n\n\n\n\n\n\ndrag = simulation =&gt; {\n\n  function dragstarted(event, d) {\n    if (!event.active) simulation.alphaTarget(0.3).restart();\n    d.fx = d.x;\n    d.fy = d.y;\n  }\n\n  function dragged(event, d) {\n    d.fx = event.x;\n    d.fy = event.y;\n  }\n\n  function dragended(event, d) {\n    if (!event.active) simulation.alphaTarget(0);\n    d.fx = null;\n    d.fy = null;\n  }\n\n  return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n}"
  },
  {
    "objectID": "maintenance-repo.html",
    "href": "maintenance-repo.html",
    "title": "EpiVerse",
    "section": "",
    "text": "{“title”:“Organization-level Metrics and Models”,“markdown”:{“yaml”:{“title”:“Organization-level Metrics and Models”},“containsRefs”:false,“markdown”:“dashboard presents metrics and models for each repository within both the(https://github.com/epiverse-trace) and(https://github.com/reconhub) GitHub organizations. The dashboardhas three main pages:. An organization maintenance page identifyingmaintenance priorities across all repositories.. Community Models summarising scores for the various(https://chaoss.community/kb-metrics-and-metrics-models/) for eachrepository.. A network diagram of strengths of relationship betweeneach repository.”,“srcMarkdownNoYaml”:“dashboard presents metrics and models for each repository within both the(https://github.com/epiverse-trace) and(https://github.com/reconhub) GitHub organizations. The dashboardhas three main pages:. An organization maintenance page identifyingmaintenance priorities across all repositories.. Community Models summarising scores for the various(https://chaoss.community/kb-metrics-and-metrics-models/) for eachrepository.. A network diagram of strengths of relationship betweeneach repository.”},“formats”:{“html”:{“identifier”:{“display-name”:“HTML”,“target-format”:“html”,“base-format”:“html”},“execute”:{“fig-width”:7,“fig-height”:5,“fig-format”:“retina”,“fig-dpi”:96,“df-print”:“default”,“error”:false,“eval”:true,“cache”:null,“freeze”:false,“echo”:true,“output”:true,“warning”:true,“include”:true,“keep-md”:false,“keep-ipynb”:false,“ipynb”:null,“enabled”:null,“daemon”:null,“daemon-restart”:false,“debug”:false,“ipynb-filters”:[],“ipynb-shell-interactivity”:null,“plotly-connected”:true,“engine”:“markdown”},“render”:{“keep-tex”:false,“keep-typ”:false,“keep-source”:false,“keep-hidden”:false,“prefer-html”:false,“output-divs”:true,“output-ext”:“html”,“fig-align”:“default”,“fig-pos”:null,“fig-env”:null,“code-fold”:“none”,“code-overflow”:“scroll”,“code-link”:false,“code-line-numbers”:false,“code-tools”:false,“tbl-colwidths”:“auto”,“merge-includes”:true,“inline-includes”:false,“preserve-yaml”:false,“latex-auto-mk”:true,“latex-auto-install”:true,“latex-clean”:true,“latex-min-runs”:1,“latex-max-runs”:10,“latex-makeindex”:“makeindex”,“latex-makeindex-opts”:[],“latex-tlmgr-opts”:[],“latex-input-paths”:[],“latex-output-dir”:null,“link-external-icon”:false,“link-external-newwindow”:false,“self-contained-math”:false,“format-resources”:[],“notebook-links”:true},“pandoc”:{“standalone”:true,“wrap”:“none”,“default-image-extension”:“png”,“to”:“html”,“toc”:true,“output-file”:“index.html”},“language”:{“toc-title-document”:“Table of contents”,“toc-title-website”:“On this page”,“related-formats-title”:“Other Formats”,“related-notebooks-title”:“Notebooks”,“source-notebooks-prefix”:“Source”,“other-links-title”:“Other Links”,“code-links-title”:“Code Links”,“launch-dev-container-title”:“Launch Dev Container”,“launch-binder-title”:“Launch Binder”,“article-notebook-label”:“Article Notebook”,“notebook-preview-download”:“Download Notebook”,“notebook-preview-download-src”:“Download Source”,“notebook-preview-back”:“Back to Article”,“manuscript-meca-bundle”:“MECA Bundle”,“section-title-abstract”:“Abstract”,“section-title-appendices”:“Appendices”,“section-title-footnotes”:“Footnotes”,“section-title-references”:“References”,“section-title-reuse”:“Reuse”,“section-title-copyright”:“Copyright”,“section-title-citation”:“Citation”,“appendix-attribution-cite-as”:“For attribution, please cite this work as:”,“appendix-attribution-bibtex”:“BibTeX citation:”,“appendix-view-license”:“View License”,“title-block-author-single”:“Author”,“title-block-author-plural”:“Authors”,“title-block-affiliation-single”:“Affiliation”,“title-block-affiliation-plural”:“Affiliations”,“title-block-published”:“Published”,“title-block-modified”:“Modified”,“title-block-keywords”:“Keywords”,“callout-tip-title”:“Tip”,“callout-note-title”:“Note”,“callout-warning-title”:“Warning”,“callout-important-title”:“Important”,“callout-caution-title”:“Caution”,“code-summary”:“Code”,“code-tools-menu-caption”:“Code”,“code-tools-show-all-code”:“Show All Code”,“code-tools-hide-all-code”:“Hide All Code”,“code-tools-view-source”:“View Source”,“code-tools-source-code”:“Source Code”,“tools-share”:“Share”,“tools-download”:“Download”,“code-line”:“Line”,“code-lines”:“Lines”,“copy-button-tooltip”:“Copy to Clipboard”,“copy-button-tooltip-success”:“Copied!”,“repo-action-links-edit”:“Edit this page”,“repo-action-links-source”:“View source”,“repo-action-links-issue”:“Report an issue”,“back-to-top”:“Back to top”,“search-no-results-text”:“No results”,“search-matching-documents-text”:“matching documents”,“search-copy-link-title”:“Copy link to search”,“search-hide-matches-text”:“Hide additional matches”,“search-more-match-text”:“more match in this document”,“search-more-matches-text”:“more matches in this document”,“search-clear-button-title”:“Clear”,“search-text-placeholder”:““,”search-detached-cancel-button-title”:“Cancel”,“search-submit-button-title”:“Submit”,“search-label”:“Search”,“toggle-section”:“Toggle section”,“toggle-sidebar”:“Toggle sidebar navigation”,“toggle-dark-mode”:“Toggle dark mode”,“toggle-reader-mode”:“Toggle reader mode”,“toggle-navigation”:“Toggle navigation”,“crossref-fig-title”:“Figure”,“crossref-tbl-title”:“Table”,“crossref-lst-title”:“Listing”,“crossref-thm-title”:“Theorem”,“crossref-lem-title”:“Lemma”,“crossref-cor-title”:“Corollary”,“crossref-prp-title”:“Proposition”,“crossref-cnj-title”:“Conjecture”,“crossref-def-title”:“Definition”,“crossref-exm-title”:“Example”,“crossref-exr-title”:“Exercise”,“crossref-ch-prefix”:“Chapter”,“crossref-apx-prefix”:“Appendix”,“crossref-sec-prefix”:“Section”,“crossref-eq-prefix”:“Equation”,“crossref-lof-title”:“List of Figures”,“crossref-lot-title”:“List of Tables”,“crossref-lol-title”:“List of Listings”,“environment-proof-title”:“Proof”,“environment-remark-title”:“Remark”,“environment-solution-title”:“Solution”,“listing-page-order-by”:“Order By”,“listing-page-order-by-default”:“Default”,“listing-page-order-by-date-asc”:“Oldest”,“listing-page-order-by-date-desc”:“Newest”,“listing-page-order-by-number-desc”:“High to Low”,“listing-page-order-by-number-asc”:“Low to High”,“listing-page-field-date”:“Date”,“listing-page-field-title”:“Title”,“listing-page-field-description”:“Description”,“listing-page-field-author”:“Author”,“listing-page-field-filename”:“File Name”,“listing-page-field-filemodified”:“Modified”,“listing-page-field-subtitle”:“Subtitle”,“listing-page-field-readingtime”:“Reading Time”,“listing-page-field-wordcount”:“Word Count”,“listing-page-field-categories”:“Categories”,“listing-page-minutes-compact”:“{0} min”,“listing-page-category-all”:“All”,“listing-page-no-matches”:“No matching items”,“listing-page-words”:“{0} words”,“listing-page-filter”:“Filter”,“draft”:“Draft”},“metadata”:{“lang”:“en”,“fig-responsive”:true,“quarto-version”:“1.7.14”,“theme”:“cosmo”,“title”:“Organization-level Metrics and Models”},“extensions”:{“book”:{“multiFile”:true}}}},“projectFormats”:[“html”]}"
  }
]