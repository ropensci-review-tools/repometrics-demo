[
  {
    "objectID": "org.html",
    "href": "org.html",
    "title": "Organization",
    "section": "",
    "text": "This page provides an organization-level overview of all repositories in both the reconhub and epiverse-trace GitHub organizations. Statistics here are assessed for each repository, and aggregated across the organizations into four distinct categories:\nThe Overall column is an average of all metrics across all of these four categorical groupings, and provides an overall metric of repository health.\nfunction sparkbar(max) {\n  const colourScale = d3.scaleSequential(d3.interpolateCool)\n    .domain([0, max]);\n\n  return (x) =&gt; htl.html`&lt;div style=\"\n    background: ${colourScale(x)};\n    color: black;\n    width: ${100 * x / max}%;\n    float: right;\n    padding-right: 3px;\n    box-sizing: border-box;\n    overflow: visible;\n    display: flex;\n    justify-content: end;\"&gt;${x.toFixed(2).toLocaleString(\"en-US\")}`\n}\n\nfunction tooltip(title, expl) {\n    const th = document.createElement(\"th\");\n    th.title = expl\n    th.style.background = \"#f0f8ff\";\n    th.textContent = title;\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    return th;\n}\n\nfunction pkgfmt(pkg) {\n    const th = document.createElement(\"th\");\n    th.title = \"hover\"\n    th.style.background = \"#f0f8ff\";\n    th.textContent = pkg;\n\n    th.addEventListener(\"mouseover\", () =&gt; th.style.background = \"#d0e8ff\");\n    th.addEventListener(\"mouseout\", () =&gt; th.style.background = \"#f0f8ff\");\n\n    th.addEventListener(\"click\", () =&gt; {\n        localStorage.setItem(\"orgmetricsRepo\", pkg);\n        th.style.background = \"#a0f8ff\";\n        window.location.href = \"/repo.html\";\n    });\n\n    return th;\n}"
  },
  {
    "objectID": "org.html#aggregate-metrics",
    "href": "org.html#aggregate-metrics",
    "title": "Organization",
    "section": "Aggregate metrics",
    "text": "Aggregate metrics\nThis chart shows the recent development of metrics aggregated into each of the four groups, plus the “Overall” metric averaged across all four groups.\n\n\nmetricsData = {\n    return transpose(metrics_dates_in).map(row =&gt; ({\n        ...row,\n        date: new Date(row.date)\n    }));\n}\n\n\n\n\n\n\n\nPlot.plot({\n    color: {\n        legend: true,\n        label: \"name\",\n        swatchHeight: 4,\n        domain: [\"Development\", \"GitHub\", \"Popularity\", \"Dep.+Rel.\", \"Overall\"],\n    },\n    marks: [\n        Plot.lineY(metricsData, {\n            x: \"date\",\n            y: \"value\",\n            stroke: \"name\",\n            strokeWidth:  2,\n            strokeDasharray: \"2,5\",\n        }),\n        Plot.linearRegressionY(metricsData, {\n            x: \"date\",\n            y: \"value\",\n            stroke: \"name\",\n            strokeWidth: 2,\n            ci: 0\n        }),\n        Plot.axisY({\n            label: null,\n        }),\n    ],\n    x: {\n        grid: true,\n        type: \"utc\",\n        domain: [d3.min(metricsData, d =&gt; d.date), d3.max(metricsData, d =&gt; d.date)],\n        tickFormat: \"%Y\", \n        ticks: [...new Set(metricsData.map(d =&gt; d.date.getFullYear()))].map(year =&gt; new Date(`${year}-01-01`)),\n    },\n    y: { grid: true },\n    style: {\n        fontSize: '16px',\n    }\n})\n\n\n\n\n\n\n\n\nAnd table shows metrics for each package, for the latest time period only aggregated into each of the four groups. Clicking on the “package” values will lead to the repository maintenance page with further details of the selected package or repository.\n\nmetricsGroupedTable = {\n    return transpose(metrics_table_in).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\nInputs.table(metricsGroupedTable, {\n    width: {\n        package: 100,\n        total: 200,\n        development: 200,\n        issues: 200,\n        popularity: 200,\n        meta: 200,\n    },\n    format: {\n        package: d =&gt; pkgfmt(d),\n        development: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.development)),\n        issues: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.issues)),\n        popularity: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.popularity)),\n        meta: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.meta)),\n        total: sparkbar(d3.max(metricsGroupedTable, d =&gt; d.total)),\n    },\n    header: {\n        development: tooltip(\"Development\", \"Code development and maintenance metrics\"),\n        issues: tooltip(\"Issues\", \"GitHub issues and pull request activity\"),\n        popularity: tooltip(\"Popularity\", \"Project popularity on CRAN (where applicable) and GitHub\"),\n        meta: tooltip(\"Dependencies and releases\", \"\"),\n        total: tooltip(\"Overall\", \"Average across all four categories of metrics.\"),\n    },\n})"
  },
  {
    "objectID": "org.html#maintenance-deficit",
    "href": "org.html#maintenance-deficit",
    "title": "Organization",
    "section": "Maintenance deficit",
    "text": "Maintenance deficit\nThis next graph shows the maintenance deficit over time, as the difference between community engagement and developer responsiveness. Repositories with high community engagement yet low developer responsiveness have a high maintenance deficit, and vice-versa. The “Deficit” scores are scaled to fix within the same range as the metrics of community engagement and developer responsiveness.\n\nmaintenanceData = {\n    return transpose(maintenance_ts_in).map(row =&gt; ({\n        ...row,\n        date: new Date(row.date)\n    }));\n}\n\n\n\n\n\n\n\nPlot.plot({\n    color: {\n        legend: true,\n        label: \"name\",\n        swatchHeight: 4,\n        domain: [\"Comm. Engage.\", \"Dev. Resp.\", \"Deficit\"],\n    },\n    marks: [\n        Plot.lineY(maintenanceData, {\n            x: \"date\",\n            y: \"value\",\n            stroke: \"name\",\n            strokeWidth:  2,\n            strokeDasharray: \"2,5\",\n        }),\n        Plot.linearRegressionY(maintenanceData, {\n            x: \"date\",\n            y: \"value\",\n            stroke: \"name\",\n            strokeWidth: 2,\n            ci: 0\n        }),\n        Plot.axisY({\n            label: null,\n        }),\n    ],\n    x: {\n        grid: true,\n        type: \"utc\",\n        domain: [d3.min(metricsData, d =&gt; d.date), d3.max(metricsData, d =&gt; d.date)],\n        tickFormat: \"%Y\",\n        ticks: [...new Set(metricsData.map(d =&gt; d.date.getFullYear()))].map(year =&gt; new Date(`${year}-01-01`)),\n    },\n    y: { grid: true },\n    style: {\n        fontSize: '16px',\n    }\n})\n\n\n\n\n\n\nAnd these are maintenance deficit values for individual repositories (packages), for the latest time period only.\n\nmaintenanceRepoData = {\n    return transpose(maintenance_repo_in).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\nInputs.table(maintenanceRepoData, {\n    width: {\n        package: 100,\n        comm_engage: 200,\n        dev_resp: 200,\n        maintenance: 200,\n    },\n    format: {\n        package: d =&gt; pkgfmt(d),\n        comm_engage: sparkbar(d3.max(maintenanceRepoData, d =&gt; d.comm_engage)),\n        dev_resp: sparkbar(d3.max(maintenanceRepoData, d =&gt; d.dev_resp)),\n        maintenance: sparkbar(d3.max(maintenanceRepoData, d =&gt; d.maintenance)),\n    },\n    header: {\n        comm_engage: tooltip(\"Community Engagement\", \"Community Engagement metrics\"),\n        dev_resp: tooltip(\"Developer Responsivness\", \"Developer Responsiveness metrics\"),\n        maintenance: tooltip(\n            \"Maintenance Deficit\",\n            \"Community Engagment minus Developer Responsivess (rescaled)\"\n        ),\n    },\n})"
  },
  {
    "objectID": "org.html#additional-metrics-and-indicators",
    "href": "org.html#additional-metrics-and-indicators",
    "title": "Organization",
    "section": "Additional metrics and indicators",
    "text": "Additional metrics and indicators\nThe following show several more distinct indicators of maintenance need, all of which are assessed over the most recent period of repository activity:\n\nCtb. Absence: A measure of “contributor absence” for each repository, indicating maintenance deficit arising through absence of primary contributors.\nResp. Time: The average time for a core maintainer to respond to a new issue or pull request\nIssue Labels: The proportion of issues with labels\nProp. Bugs: The proportion of new issues opened that were bug reports\n\n\nextraMetricsTable = {\n    return transpose(data_extra_metrics_in).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\nInputs.table(extraMetricsTable, {\n    width: {\n        repo: 100,\n        ctb_absence: 200,\n        response: 200,\n        labels: 200,\n        bugs: 200,\n    },\n    format: {\n        repo: d =&gt; pkgfmt(d),\n        ctb_absence: sparkbar(d3.max(extraMetricsTable, d =&gt; d.ctb_absence)),\n        response: sparkbar(d3.max(extraMetricsTable, d =&gt; d.response)),\n        labels: sparkbar(d3.max(extraMetricsTable, d =&gt; d.labels)),\n        bugs: sparkbar(d3.max(extraMetricsTable, d =&gt; d.bugs)),\n    },\n    header: {\n        ctb_absence: tooltip(\"Ctb. Absence\", \"Contributor absence factor\"),\n        response: tooltip(\"Resp. Time\", \"Time to respond to GitHub issues and pull requests\"),\n        labels: tooltip(\"Issue Labels\", \"Proportion of labelled issues\"),\n        bugs: tooltip(\"Prop. Bugs\", \"Proportion of issues and PRs which are about bugs.\"),\n    },\n})\n\n\n\n\n\n\n\n\nContributor Absence\nFinally, this table shows a metric of main contributor absence. Values are only and whose absence is equivalent to comp. A contributor who has been entirely absent during the most recent period, and was responsible for 100% of the commits within a single repository, would have a contributor absence score of one. A contributor absence of one could also reflect somebody contributing exactly 50% of the code to two repositories, and being entirely absent during the recent period. Any contributions by that contributor during the recent period would reduce the absence factor. In general, high absence factors describe recently absent contributors who have previously been major contributors to numerous repositories.\n\nPlot = import(\"https://esm.sh/@observablehq/plot\")\n\n\n\n\n\n\n\nctb_abs_ctb = {\n    return transpose(ctb_abs_ctb_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nctb_abs_ctb_len = ctb_abs_ctb.length;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(ctb_abs_ctb, {\n    format: {\n        measure: sparkbar(d3.max(ctb_abs_ctb, d =&gt; d.measure)),\n    },\n    header: {\n        measure: tooltip(\"Ctb. Absence\", \"Contributor absence factor\"),\n    },\n})"
  },
  {
    "objectID": "network.html",
    "href": "network.html",
    "title": "Network",
    "section": "",
    "text": "This page shows an interactive network diagram of “epiverse” packages, intended to demonstrate possible ways to view relationships between packages. The page will likely be updated to present two separate network diagrams, one for relationships between packages, to enable visual identification of the centrality of individual packages, and one for relationships between people.\nIn current form, the main functional component is the slider for “*Dependencies vs Code Similarity”. This controls the thickness of lines connecting packages, with lines only shown for packages which have direct dependencies on one another.\n\nFor a value of zero, lines directly reflect (relative) numbers of function calls made from one package (in orange) to another (in blue).\nFor a value of one, lines are scaled by how different the code within each pair of packages is, with thinner lines for more similar packages.\n\nThese two kinds of relationships can be taken together to indicate more important packages as those which are both used by many other packages, and are notably different from other packages. Thus important relationships are those for which lines which remain thick regardless of the value selected with this slider.\n\n\n\n\n\nnodesAll = {\n    return transpose(nodes_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nlinksAll = {\n    return transpose(links_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nnodesAllEmb = {\n    return transpose(nodes_in_emb).map(row =&gt; ({\n        ...row,\n    }));\n}\nlinksAllEmb = {\n    return transpose(links_in_emb).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof strength = Inputs.range(\n    [-2000,0],\n    {value: -400, step: 100, label: htl.html`&lt;b&gt;Force Strength:&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\nviewof linewidth = Inputs.range(\n    [1,10],\n    {value: 1, step: 1, label: htl.html`&lt;b&gt;Line Thickness:&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\nviewof deps_vs_emb = Inputs.range(\n    [0, 1],\n    {value: 0, step: 0.1, label: htl.html`&lt;b&gt;Dependencies (0) vs Code Similarity (1):&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\n\n\n\nnode_types = [\"depends\", \"uses\", \"isolated\"]\nviewof typeSelection = {\n    const input =  Inputs.checkbox(\n        node_types,\n        {\n            value: [\"depends\", \"uses\"],\n            label: htl.html`&lt;b&gt;Node types:&lt;/b&gt;`,\n        }\n    );\n\n    // Modification ideas from\n    // https://talk.observablehq.com/t/what-is-the-best-way-to-style-an-input-checkbox/7690/2\n    const scope = DOM.uid().id;\n    input.classList.add(scope);\n\n    input.append(htl.html`&lt;style&gt;\n    .${scope} &gt; div, .${scope} &gt; div label { display: flex; flex-wrap: wrap; gap: 10px; width: 300px }\n    `)\n\n    return input;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {Swatches} from \"@d3/color-legend\"\nSwatches(chart.scales.color)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchart = {\n\n  const width = 928;\n  const height = 600;\n\n  // linksAll has fewer (source, target) pairs than linksAllEmb, so create a\n  // lookup table of those pairs which do exist:\n  const linksAllEmbLookup = {};\n  linksAllEmb.forEach(obj =&gt; {\n    linksAllEmbLookup[`${obj.source},${obj.target}`] = obj.value;\n  });\n\n  // Then loop over all linksAllEmb, and add values for linksAll where they\n  // exist for same (source, target) pair. Note that obj1.value is embedding\n  // strength, while linksAllLookup holds dependency strength\n  const linksCombined = linksAll.map(obj =&gt; {\n      const key = `${obj.source},${obj.target}`;\n      return {\n          ...obj,\n          value: linksAllEmbLookup[key] ?\n            (1. - deps_vs_emb) * obj.value + deps_vs_emb * linksAllEmbLookup[key] : obj.value\n      };\n  });\n\n  // const nodes = nodesAllEmb.filter(function(node) {\n  //   return typeSelection.includes(node.group) || node.group.length === 0\n  // })\n  const nodes = nodesAll.filter(function(node) {\n    return typeSelection.includes(node.group) || node.group.length === 0\n  })\n  const links = linksCombined.filter(function(link) {\n    return typeSelection.includes(link.type) || link.type.length === 0\n  })\n  // const links = linksCombined.filter(function(link) {\n  //   return typeSelection.includes(link.type) || link.type.length === 0\n  // })\n\n  const types = Array.from(new Set(nodes.map(d =&gt; d.group)));\n\n  const color = d3.scaleOrdinal(types, d3.schemeCategory10);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(links).id(d =&gt; d.id))\n      .force(\"charge\", d3.forceManyBody().strength(strength))\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY());\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"style\", \"max-width: 100%; height: auto; font: 14px sans-serif;\");\n\n  // Per-type markers, as they don't inherit styles.\n  svg.append(\"defs\").selectAll(\"marker\")\n    .data(types)\n    .join(\"marker\")\n      .attr(\"id\", d =&gt; `arrow-${d}`)\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 15)\n      .attr(\"refY\", -0.5)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n    .append(\"path\")\n      .attr(\"fill\", color)\n      .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n  const link = svg.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke-width\", 1.5)\n    .selectAll(\"path\")\n    .data(links)\n    .join(\"path\")\n      .attr(\"stroke\", d =&gt; color(d.type))\n      .attr(\"stroke-width\", d =&gt; d.value * linewidth);\n\n  const node = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(nodes)\n    .join(\"g\")\n      .call(drag(simulation));\n\n  node.append(\"circle\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 1.5)\n      .data(nodes)\n      .join(\"circle\")\n        .attr(\"fill\", d =&gt; color(d.group))\n        .attr(\"r\", d =&gt; 10 * Math.log10(d.num_calls + 1));\n\n  node.append(\"text\")\n      .attr(\"x\", 8)\n      .attr(\"y\", \"0.31em\")\n      .text(d =&gt; d.id)\n      .html(d =&gt; `&lt;a href=\"https://github.com/${d.id}\" style=\"text-decoration:none\" target=\"_blank\"&gt;${d.id}&lt;/a&gt;`)\n    .clone(true).lower()\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 3);\n\n  simulation.on(\"tick\", () =&gt; {\n    link.attr(\"d\", linkArc);\n    node.attr(\"transform\", d =&gt; `translate(${d.x},${d.y})`);\n  });\n\n  invalidation.then(() =&gt; simulation.stop());\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\n\n\n\n\n\n\nfunction linkArc(d) {\n  const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);\n  return `\n    M${d.source.x},${d.source.y}\n    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}\n  `;\n}\n\n\n\n\n\n\n\ndrag = simulation =&gt; {\n\n  function dragstarted(event, d) {\n    if (!event.active) simulation.alphaTarget(0.3).restart();\n    d.fx = d.x;\n    d.fy = d.y;\n  }\n\n  function dragged(event, d) {\n    d.fx = event.x;\n    d.fy = event.y;\n  }\n\n  function dragended(event, d) {\n    if (!event.active) simulation.alphaTarget(0);\n    d.fx = null;\n    d.fy = null;\n  }\n\n  return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n}"
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "Community Health",
    "section": "",
    "text": "The Organizational Maintenance and Repository Maintenance pages provide various insights into maintenance deficits and needs across the whole organization and within individual repositories. This page provides more detail on the various CHAOSS (Community Health Analytics in Open Source Software) models used to generate values shown on those two pages. Each of these conceptual models aggregates various individual metrics, and aims to synthesise prominent aspects of community health. This page provides insights into a range of those models, assessed for each repository in the epiverse-trace and reconhub GitHub organizations. Details of individual metrics can be seen on the Repository Maintenance page."
  },
  {
    "objectID": "models.html#aggregate-community-health",
    "href": "models.html#aggregate-community-health",
    "title": "Community Health",
    "section": "Aggregate Community Health",
    "text": "Aggregate Community Health\nThis page shows aggregate community health scores for all repositories within the reconhub and epiverse-trace organizations. Higher values describe repositories with greater community health scores. Values for individual models are standardised across all repositories to have mean values of zero and standard deviations of one. These results are aggregated across thirteen distinct models, leading to maximal aggregated values slightly exceeding that value.\n\nPlot = import(\"https://esm.sh/@observablehq/plot\")\n\n\n\n\n\n\n\nmodels_all = {\n    return transpose(models_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmodels_final = models_all.filter(function(mod) {\n    return mod.name === \"final\"\n})\nmodels_len = models_final.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models_final, {\n            y: \"package\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(models_final,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models_final, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "models.html#individual-models-of-community-health",
    "href": "models.html#individual-models-of-community-health",
    "title": "Community Health",
    "section": "Individual models of community health",
    "text": "Individual models of community health\nThe following section shows values for each individual model of community health for all repositories.\n\ncommHealthVars = [\n    \"collab_devel_index\",\n    \"comm_serv_support\",\n    \"comm_welcoming\",\n    \"community_activity\",\n    \"dev_responsiveness\",\n    \"oss_compliance\",\n    \"proj_awareness\",\n    \"proj_engagement\",\n    \"starter_health\",\n    \"viability_community\",\n    \"viability_gov\",\n    \"viability_starter\",\n    \"viability_strategy\"\n]\nviewof commHealthVar = Inputs.select(\n    commHealthVars,\n    { multiple: \"false\", label: \"Community Health Variable\" }\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodels_filtered = models_all.filter(function(mod) {\n    return mod.name === commHealthVar\n})\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models_filtered, {\n            y: \"package\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(models_filtered,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models_filtered, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "models.html#community-health-for-individual-repositories",
    "href": "models.html#community-health-for-individual-repositories",
    "title": "Community Health",
    "section": "Community health for individual repositories",
    "text": "Community health for individual repositories\nThe following section shows all models of community health for a selected repository.\n\nreposAll = models_all.map(function(item) {\n    return item.package;\n});\nrepos = Array.from(new Set(reposAll));\nrepoSet = localStorage.getItem(\"orgmetricsRepo\") || repos [0]\nviewof repo = Inputs.select(\n    repos,\n    {\n        multiple: false,\n        value: repoSet,\n        label: htl.html`&lt;b&gt;Repository:&lt;/b&gt;`\n    }\n)\nlocalStorage.setItem(\"orgmetricsRepo\", repo.toString());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel_repo = models_all.filter(function(mod) {\n    return mod.package === repo && mod.name !== \"final\"\n})\nmodel_repo_len = model_repo.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 40 * model_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(model_repo, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(model_repo,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(model_repo, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"name\",\n            text: \"name\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EpiVerse Organizational Overview",
    "section": "",
    "text": "There are\n67 repositories\nincluding\n\n\n\n32 from reconhub\n\n\n\n\n30 from epiverse-trace\n\n\n\n\n\n\n\n\n\n\n\n\n\nUrgent maintance required on\n2 packages\n\nwith high community engagement, yet low developer responsiveness:\n\n\n\ncfr\n\n\n\nvaccineff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTotal commits:\n23,150\n\nbetween \n2014\n and \n2025\n\n(Plot below shows time series)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGitHub Activity\n15,304\nTotal issues, comments, and pull requests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaintenance priorities:\n\n\nIssue response time:\n\n\ncfr\n\n\n\nHigh ratio of issues-to-PRs:\n\n\nvaccineff\n\n\n\nSlow response to pull requests:\n\n\ncfr\n\n\n\nvaccineff\n\n\n\nSlow review times on pull requests:\n\n\ncfr\n\n\n\nvaccineff\n\n\n\nSlow response to issues:\n\n\ncfr\n\n\n\nvaccineff\n\n\n\n\n\n\n\n\n\nThis dashboard presents metrics and models for each repository within both the epiverse-trace and reconhub GitHub organizations. It is intended to demonstrate the kinds of analyses and insights that are possible. It is intended to change and develop a lot. Please provide feedback via GitHub by clicking on the symbol on the top right.\nThe dashboard currently has three main pages:\n\nAn organization maintenance page identifying maintenance priorities across all repositories.\nA repository maintenance page providing additional detail on maintenance needs of a selected repository.\nA Community Health summarising scores for the various CHAOSS (Community Health Analytics in Open Source Software) models and metrics for each repository.\n\nThere is also an additional network diagram page, showing strengths of relationship between each repository."
  },
  {
    "objectID": "repo.html",
    "href": "repo.html",
    "title": "Repositories",
    "section": "",
    "text": "function sparkbar(max) {\n  const colourScale = d3.scaleSequential(d3.interpolateCool)\n    .domain([0, max]);\n\n  return (x) =&gt; htl.html`&lt;div style=\"\n    background: ${colourScale(x)};\n    color: black;\n    width: ${100 * x / max}%;\n    float: right;\n    padding-right: 3px;\n    box-sizing: border-box;\n    overflow: visible;\n    display: flex;\n    justify-content: end;\"&gt;${x.toFixed(2).toLocaleString(\"en-US\")}`\n}\nPlot = import(\"https://esm.sh/@observablehq/plot\")\nmetricsTranspose = {\n    return transpose(metrics_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nrepo_src = {\n    return transpose(repo_src_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nctb_absTranspose = {\n    return transpose(ctb_abs_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nissue_respTranspose = {\n    return transpose(issue_resp_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nissue_bugsTranspose = {\n    return transpose(issue_bugs_in).map(row =&gt; ({\n        ...row,\n    }));\n}\ndepsTranspose = {\n    return transpose(deps_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nfnCallsTranspose = {\n    return transpose(fn_calls_in).map(row =&gt; ({\n        ...row,\n    }));\n}\ncranDataTranspose = {\n    return transpose(cran_data_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nreposAll = metricsTranspose.map(function(item) {\n    return item.package;\n});\nrepos = Array.from(new Set(reposAll));\nrepoSet = localStorage.getItem(\"orgmetricsRepo\") || repos [0]\nviewof repo = Inputs.select(\n    repos,\n    {\n        multiple: false,\n        value: repoSet,\n        label: htl.html`&lt;b&gt;Repository:&lt;/b&gt;`\n    }\n)\ns = localStorage.setItem(\"orgmetricsRepo\", repo.toString());\nrepoURL = repo_src.filter(function(r) {\n    return r.package === repo\n})[0].url;\nhtl.html`&lt;div&gt;Click here to see the &lt;a href=${repoURL} target=\"_blank\"&gt;${repo} repository&lt;/a&gt;.&lt;/div&gt;`\nctb_abs = ctb_absTranspose.filter(function(r) {\n    return r.repo === repo\n})\nissue_resp = issue_respTranspose.filter(function(r) {\n    return r.repo === repo\n})\nissue_bugs = issue_bugsTranspose.filter(function(r) {\n    return r.repo === repo\n})\ndeps = depsTranspose.filter(function(r) {\n    return r.package === repo\n})\nfn_calls = fnCallsTranspose.filter(function(r) {\n    return r.package === repo\n})\nhas_fn_calls = fn_calls.length &gt; 0;\ncran_data = cranDataTranspose.filter(function(r) {\n    return r.package === repo\n})\nhas_cran_data = cran_data.length &gt; 0;\nnot_on_cran = not_cran_in.includes(repo);\nrepoMetrics = {\n    return transpose(repo_metrics_in[repo]).map(row =&gt; ({\n        ...row,\n    }))\n}\nctbs = {\n    return transpose(ctbs_in[repo]).map(row =&gt; ({\n        ...row,\n    }))\n}\nctbs_gh = ctbs.map((ctb) =&gt; ctb['gh_handle']);\n\nfunction pluraliseObjects(x, what) {\n    if (x === 0) {\n        return \"No \" + what + \"s\";\n    } else if (x === 1) {\n        return \"1 \" + what;\n    } else {\n        return x + \" \" + what + \"s\";\n    }\n}\n\nmaintainer_count = repoMetrics.filter(function(m) {\n    return m.name == \"maintainer_count\"\n})[0].value;\nmaintainer_count_txt = pluraliseObjects(maintainer_count, \"primary maintainer\");\n\nmaintainer_gh = [].concat(ctbs_gh.slice(0, maintainer_count) || []);\nmaintainer_gh_list = maintainer_gh.length == 0 ? undefined:\n    (maintainer_gh.length == 1 ? htl.html`&lt;li&gt;&lt;a href='https://github.com/${maintainer_gh}'&gt;${maintainer_gh}&lt;/a&gt;&lt;/li&gt;` :\n    maintainer_gh.map(m =&gt; htl.html`&lt;li&gt;&lt;a href='https://github.com/${m}'&gt;${m}&lt;/a&gt;&lt;/li&gt;`));\nmaintainer_gh_list_txt = maintainer_gh.length &gt; 0 ? htl.html`&lt;ul&gt;${maintainer_gh_list}&lt;/ul&gt;` : undefined;\n\nctb_count = repoMetrics.filter(function(m) {\n    return m.name == \"ctb_count\"\n})[0].value;\nctb_count_txt = pluraliseObjects(ctb_count, \"additional contributor\");\n\nnum_commits = repoMetrics.filter(function(m) {\n    return m.name == \"num_commits\"\n})[0].value;\ntest_coverage = repoMetrics.filter(function(m) {\n    return m.name == \"test_coverage\"\n})[0].value;\ntest_coverage_txt = \"Test coverage: \" + (test_coverage ? (test_coverage * 100) + \"%\" : \"none\");\n\nnum_stars = repoMetrics.filter(function(m) {\n    return m.name == \"num_stars\"\n})[0].value * 100;\nnum_forks = repoMetrics.filter(function(m) {\n    return m.name == \"num_forks\"\n})[0].value * 100;\nstars_forks = (num_stars + num_forks).toLocaleString();\n\nnum_dl = repoMetrics.filter(function(m) {\n    return m.name == \"cran_downloads\"\n})[0].value.toLocaleString();\n\nissues_active = repoMetrics.filter(function(m) {\n    return m.name == \"issues_active\"\n})[0].value;\nchange_req_n_opened = repoMetrics.filter(function(m) {\n    return m.name == \"change_req_n_opened\"\n})[0].value;\nissue_count = pluraliseObjects(issues_active + change_req_n_opened, \"Github Issue\")\n\n// 'issue_cmt_count' from repometrics is *mean* value; convert back to\n// full count here:\nissue_cmt_count = Math.ceil(repoMetrics.filter(function(m) {\n    return m.name == \"issue_cmt_count\"\n})[0].value * issues_active);\nissue_cmt_txt = pluraliseObjects(issue_cmt_count, \"Issue comment\")\n\nimp_txt = 'Imports: ' + deps[0]['imports'];\nsug_txt = 'Suggests: ' + deps[0]['suggests'];\n\ndeps_in_org = [].concat(deps[0]['deps_in_org'] || []);\ndeps_in_org_txt = deps_in_org.length == 0 ?\n    'Depends on no other pkgs in org' :\n    'Depends on org pkgs:';\ndeps_in_org_list = deps_in_org.length == 0 ? undefined :\n    (deps_in_org.length == 1 ? htl.html`&lt;li&gt;${deps_in_org}&lt;/li&gt;` :\n    deps_in_org.map(d =&gt; htl.html`&lt;li&gt;${d}&lt;/li&gt;`));\nn_deps_in_org_txt = deps_in_org.length &gt; 0 ? htl.html`&lt;ul&gt;${deps_in_org_list}&lt;/ul&gt;` : undefined;\n\nrevdeps = [].concat(deps[0]['revdeps'] || []);\nrevdeps_list = revdeps.length == 0 ? undefined :\n    (revdeps.length == 1 ? htl.html`&lt;li&gt;${revdeps}&lt;/li&gt;` :\n    revdeps.map(d =&gt; htl.html`&lt;li&gt;${d}&lt;/li&gt;`));\nrevdeps_in_org = revdeps.length &gt; 0 ?\n    'Dependend on by org pkgs:' :\n    'Not depended on by any other pkgs in org';\nrevdeps_list_txt = revdeps.length &gt; 0 ? htl.html`&lt;ul&gt;${revdeps_list}&lt;/ul&gt;` : undefined;"
  },
  {
    "objectID": "repo.html#pkgcheck-summary",
    "href": "repo.html#pkgcheck-summary",
    "title": "Repositories",
    "section": "pkgcheck Summary",
    "text": "pkgcheck Summary\nThis shows the summary output from rOpenSci’s pkgcheck package. Passing checks are marked by ✅; failing checks by ❌; and optional checks that may be worth examining with 👀.\n\nthis_pkg_summary = pkgcheck_in[repo];\n\nfunction unescapeHtml(unsafe) {\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = unsafe;\n  return textarea.value;\n}\n\nhtl.html`\n  &lt;div&gt;${this_pkg_summary.map((item) =&gt; htl.html.fragment`&lt;ul&gt;\n    &lt;li&gt;${unescapeHtml(item)}&lt;/li&gt;\n  &lt;/ul&gt;`)}&lt;/div&gt;`"
  },
  {
    "objectID": "repo.html#cran-summary",
    "href": "repo.html#cran-summary",
    "title": "Repositories",
    "section": "CRAN Summary",
    "text": "CRAN Summary\n\nnot_on_cran ? htl.html`&lt;div&gt;This package is not on CRAN&lt;/div&gt;` :\n    (has_cran_data ?\n    htl.html`&lt;div&gt;&lt;a href=\"https://cran.r-project.org//web/checks/check_results_${repo}.html\"&gt;CRAN checks&lt;/a&gt; on this package currently list these issues:&lt;/div&gt;` :\n    htl.html`&lt;div&gt;&lt;a href=\"https://cran.r-project.org//web/checks/check_results_${repo}.html\"&gt;CRAN checks&lt;/a&gt; on this package are all good&lt;/div&gt;`);\n\n\n\n\n\n\n\nhtl.html`&lt;div style=\"margin-top: 20px; margin-bottom: 20px;\"&gt;&lt;/div&gt;`\n\n\n\n\n\n\n\nhas_cran_data ?\n    Inputs.table(cran_data, {\n        columns: [\"package\", \"version\", \"result\", \"check\", \"message\"],\n        format: {\n            check: d =&gt; htl.html`&lt;span style=\"white-space:normal\"&gt;${d}`,\n            message: d =&gt; htl.html`&lt;span style=\"white-space:normal\"&gt;${d}`,\n        }\n    }) :\n    Inputs.table(cran_data, {\n        colunmns: [],\n    });"
  },
  {
    "objectID": "repo.html#statistical-properties",
    "href": "repo.html#statistical-properties",
    "title": "Repositories",
    "section": "Statistical properties",
    "text": "Statistical properties\nThe “Limits” slider below can be used to reduce statistical properties to only those lying in the lower or upper percentiles of the specified value. The table uses the following abbreviations:\n\n“LOC” for Lines-of-Code\n“Nr.” for Number\n“fn” for function\n“Doc” for Documentation\n\n\nviewof statsLimit = Inputs.range(\n    [0,50],\n    {value: 10, step: 5, label: htl.html`&lt;b&gt;Limits:&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\n\n\n\npkgStatsData = {\n    return transpose(pkgcheck_stats_in[repo]).map(row =&gt; ({\n        ...row,\n    })).filter(function(m) {\n        return m.percentile &lt;= statsLimit || m.percentile &gt;= (100 - statsLimit)\n    });\n}\n\n\n\n\n\n\n\nInputs.table(pkgStatsData, {\n    format: {\n        percentile: sparkbar(100),\n        noteworth: null,\n    },\n    header: {\n        measure: \"Measure\",\n        value: \"Value\",\n        percentile: \"Percentile\"\n    }\n})"
  },
  {
    "objectID": "repo.html#function-usage-in-other-packages",
    "href": "repo.html#function-usage-in-other-packages",
    "title": "Repositories",
    "section": "Function usage in other packages",
    "text": "Function usage in other packages\n\nhas_fn_calls ? htl.html`&lt;div&gt;\nThe following table shows the number of times different functions are used in\nother packages. Numbers may be less than total numbers of packages listed above\nin &lt;q&gt;&lt;i&gt;Dependencies: Used by org pkgs&lt;/i&gt;&lt;/q&gt; because some of those usages may be only\nin tests, whereas the following usage counts are within actual R code only.\n&lt;/div&gt;` :\nhtl.html`&lt;div&gt;This package uses no other packages from the organizations&lt;/div&gt;`;\n\n\n\n\n\n\n\n\n\n\nhas_fn_calls ? Inputs.table(fn_calls, {\n    columns: [\"fn_name\", \"n\"],\n    header: {\n        fn_name: \"Function name\",\n        n: \"Usage\"\n    }\n}) : Inputs.table(fn_calls, {\n    columns: []\n});\n\n\n\n\n\n\n\nThis page identifies maintenance priorities for a selected repository, in terms of both CHAOSS models, and the individual CHAOSS metrics which comprise those models. In its present state, this is mostly a proof-of-concept, and is not as well developed as the accompanying Organizational Maintenance page.\nThe “Outliers only” selector immediate below determines whether values shown for both models and metrics are outliers only (default of “true”), or whether all values are shown (“false”)."
  },
  {
    "objectID": "repo.html#chaoss-models",
    "href": "repo.html#chaoss-models",
    "title": "Repositories",
    "section": "CHAOSS models",
    "text": "CHAOSS models\nThis first graph shows scores for the various CHAOSS (Community Health Analytics in Open Source Software) models for a selected repository. Each of these models is an aggregation of several underlying metrics, which can be examined in the following sub-section.\n\nviewof outliersOnly = Inputs.radio(\n    [\"true\", \"false\"],\n    {\n        value: \"true\",\n        label: htl.html`&lt;b&gt;Outliers only:&lt;/b&gt;`,\n    }\n)\n\n\n\n\n\n\n\nmodels_all = {\n    return transpose(models_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmodels_final = models_all.filter(function(mod) {\n    return mod.name === \"final\"\n})\nmodel_repoAll = models_all.filter(function(mod) {\n    return mod.package === repo && mod.name !== \"final\"\n})\nmodel_repo = outliersOnly === \"true\" ?\n    model_repoAll.filter(function(m) {\n        return m.outlier === true;\n    }) : model_repoAll;\nmodel_repo_len = model_repo.length\nmodel_repo_ht_mult = model_repo_len &lt; 10 ? 80 : 40\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfullScaleValues = model_repoAll.map(d =&gt; d.value);\nminVal = Math.min(...fullScaleValues);\nmaxVal = Math.max(...fullScaleValues);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: model_repo_ht_mult * model_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Model Scores\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(model_repo, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(model_repo,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(model_repo, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"name\",\n            text: \"name\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"linear\",\n        domain: [minVal, maxVal]\n    }\n})"
  },
  {
    "objectID": "repo.html#chaoss-metrics",
    "href": "repo.html#chaoss-metrics",
    "title": "Repositories",
    "section": "CHAOSS metrics",
    "text": "CHAOSS metrics\nThis graph provides more detailed insight into the state of the selected repository, through showing values for individual CHAOSS metrics used to inform the aggregate models.\n\nmetrics = outliersOnly === \"true\" ?\n    metricsTranspose.filter(function(m) {\n        return m.outlier === true;\n    }) : metricsTranspose;\n\nmetrics_repo = metrics.filter(function(mod) {\n    return mod.package === repo\n})\nmetrics_repo_len = metrics_repo.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 40 * metrics_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Metric Scores\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(metrics_repo, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(metrics_repo,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(metrics_repo, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"name\",\n            text: \"name\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  }
]