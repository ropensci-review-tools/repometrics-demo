---
title: "Organization"
execute:
  echo: false
format: 
  html:
    theme:
      - yeti
---

This page provides an organization-level overview of all repositories in both
the [`reconhub`](https://github.com/reconhub) and
[`epiverse-trace`](https://github.com/epiverse-trace) GitHub organizations.
Statistics here are assessed for each repository, and aggregated across the
organizations into four distinct categories:

1. _Development_: Metrics of both code development and maintainer continuity
   and diversity. High scores reflect repositories with high levels of code
   development from a diverse community of maintainers.
2. _GitHub_: Metrics derived from GitHub issues and pull requests. High scores
   reflect repositories with active use of issues, pull requests, code reviews,
   and rapid responses from core maintainers to issues or pull requests opened
   by wider community members.
3. _Popularity_: Metrics of repository popularity, derived from CRAN download
   numbers (where applicable), GitHub stars and forks, and issue comments from
   user communities beyond core maintainers.
4. _Dependencies and Releases_: High scores reflect repositories with fewer
   dependencies and frequent releases.

The _Overall_ column is an average of all metrics across all of these four
categorical groupings, and provides an overall metric of repository health.

---

<!---
******** START UTILITY FUNCTIONS ********
--->


```{ojs}
function sparkbar(max) {
  const colourScale = d3.scaleSequential(d3.interpolateCool)
    .domain([0, max]);

  return (x) => htl.html`<div style="
    background: ${colourScale(x)};
    color: black;
    width: ${100 * x / max}%;
    float: right;
    padding-right: 3px;
    box-sizing: border-box;
    overflow: visible;
    display: flex;
    justify-content: end;">${x.toFixed(2).toLocaleString("en-US")}`
}

function tooltip(title, expl) {
    const th = document.createElement("th");
    th.title = expl
    th.style.background = "#f0f8ff";
    th.textContent = title;

    th.addEventListener("mouseover", () => th.style.background = "#d0e8ff");
    th.addEventListener("mouseout", () => th.style.background = "#f0f8ff");

    return th;
}

function pkgfmt(pkg) {
    const th = document.createElement("th");
    th.title = "hover"
    th.style.background = "#f0f8ff";
    th.textContent = pkg;

    th.addEventListener("mouseover", () => th.style.background = "#d0e8ff");
    th.addEventListener("mouseout", () => th.style.background = "#f0f8ff");

    th.addEventListener("click", () => {
        localStorage.setItem("orgmetricsRepo", pkg);
        th.style.background="#a0f8ff";
        window.location.href="/repometrics-demo/repo.html";
    });

    return th;
}

function ctbfmt(ctb) {
    const th = document.createElement("th");
    th.title = "hover"
    th.style.background = "#f0f8ff";
    th.textContent = ctb;

    th.addEventListener("mouseover", () => th.style.background = "#d0e8ff");
    th.addEventListener("mouseout", () => th.style.background = "#f0f8ff");


    th.addEventListener("click", () => {
        console.log("----setting localStorage maintainer to: " + ctb);
        localStorage.setItem('orgmetricsMaintainer', ctb);
        th.style.background="#a0f8ff";
        window.location.href="/repometrics-demo/maintainer.html";
    });

    return th;
}
```

<!---
******** END UTILITY FUNCTIONS ********
--->

## Aggregate metrics

This chart shows the recent development of metrics aggregated into each of the
four groups, plus the "Overall" metric averaged across all four groups.

<!---
******** START PLOT OF AVERAGE METRICS OVER DATES ********
--->

```{r}
data_metrics <- readRDS (fs::path ("data", "results-metrics.Rds"))
# These currently have too many datees, and will be fixed with next update
# (already fixed via #27). These lines can then be deleted.
# ----- START DATE FIX -----
dates <- as.Date (names (data_metrics))
latest <- as.Date (max (names (data_metrics)))
date_seq <- repometrics:::get_end_date_seq (end_date = latest, num_years = 3)
index <- vapply (
    date_seq,
    function (i) which.min (abs (difftime (dates, i))),
    integer (1L)
)
# cli::cli_inform ("reducing metrics from {length(dates)} to {length(index)}")
data_metrics <- data_metrics [index]
# ----- END DATE FIX -----

# Grouped metrics over dates
metrics_dates <- lapply (data_metrics, function (m) {
    m |>
        tidyr::pivot_wider (names_from = name, values_from = value) |>
        orgmetrics:::data_metrics_group () |>
        dplyr::select (-dplyr::any_of ("none")) |>
        dplyr::relocate (total, .after = package) |>
        dplyr::arrange (by = desc (total)) |>
        dplyr::summarise (dplyr::across (dplyr::where (is.numeric), mean))
})
metrics_dates <- do.call (rbind, metrics_dates)
# dplyr::add_rownames is now tibble::rownames_to_column(), but no tibble here
metrics_dates <- cbind (date = rownames (metrics_dates), metrics_dates)
rownames (metrics_dates) <- NULL
metrics_dates <- metrics_dates |>
    tidyr::pivot_longer (-date) |>
    dplyr::mutate (date = as.Date (date))
metrics_dates$name [metrics_dates$name == "total"] <- "Overall"
metrics_dates$name [metrics_dates$name == "development"] <- "Development"
metrics_dates$name [metrics_dates$name == "issues"] <- "GitHub"
metrics_dates$name [metrics_dates$name == "popularity"] <- "Popularity"
metrics_dates$name [metrics_dates$name == "meta"] <- "Dep.+Rel."

ojs_define (metrics_dates_in = metrics_dates)
```


```{ojs}
metricsData = {
    return transpose(metrics_dates_in).map(row => ({
        ...row,
        date: new Date(row.date)
    }));
}
```

```{ojs}
Plot.plot({
    color: {
        legend: true,
        label: "name",
        swatchHeight: 4,
        domain: ["Development", "GitHub", "Popularity", "Dep.+Rel.", "Overall"],
    },
    marks: [
        Plot.lineY(metricsData, {
            x: "date",
            y: "value",
            stroke: "name",
            strokeWidth:  2,
            strokeDasharray: "2,5",
        }),
        Plot.linearRegressionY(metricsData, {
            x: "date",
            y: "value",
            stroke: "name",
            strokeWidth: 2,
            ci: 0
        }),
        Plot.axisY({
            label: null,
        }),
    ],
    x: {
        grid: true,
        type: "utc",
        domain: [d3.min(metricsData, d => d.date), d3.max(metricsData, d => d.date)],
        tickFormat: "%Y", 
        ticks: [...new Set(metricsData.map(d => d.date.getFullYear()))].map(year => new Date(`${year}-01-01`)),
    },
    y: { grid: true },
    style: {
        fontSize: '16px',
    }
})
```

<!---
******** END PLOT OF AVERAGE METRICS OVER DATES ********
--->

<!---
******** START REPO-LEVEL METRICS TABLE ********
--->

And table shows metrics for each package, for the latest time period only
aggregated into each of the four groups. Clicking on the "package" values will
lead to the repository maintenance page with further details of the selected
package or repository.

```{r}
data_metrics <- readRDS (fs::path ("data", "results-metrics.Rds"))

# Main table of most recent metrics:
# which.max does not work for dates, but max does
index1 <- which (names (data_metrics) == max (names (data_metrics)))
m <- data_metrics [[index1]] |>
    tidyr::pivot_wider (names_from = name, values_from = value) |>
    orgmetrics:::data_metrics_group () |>
    dplyr::relocate (total, .after = package) |>
    dplyr::arrange (by = desc (total))
ojs_define (metrics_table_in = m)
```

```{ojs}
metricsGroupedTable = {
    return transpose(metrics_table_in).map(row => ({
        ...row,
    }));
}
```

```{ojs}
Inputs.table(metricsGroupedTable, {
    width: {
        package: 100,
        total: 200,
        development: 200,
        issues: 200,
        popularity: 200,
        meta: 200,
    },
    format: {
        package: d => pkgfmt(d),
        development: sparkbar(d3.max(metricsGroupedTable, d => d.development)),
        issues: sparkbar(d3.max(metricsGroupedTable, d => d.issues)),
        popularity: sparkbar(d3.max(metricsGroupedTable, d => d.popularity)),
        meta: sparkbar(d3.max(metricsGroupedTable, d => d.meta)),
        total: sparkbar(d3.max(metricsGroupedTable, d => d.total)),
    },
    header: {
        development: tooltip("Development", "Code development and maintenance metrics"),
        issues: tooltip("Issues", "GitHub issues and pull request activity"),
        popularity: tooltip("Popularity", "Project popularity on CRAN (where applicable) and GitHub"),
        meta: tooltip("Dependencies and releases", ""),
        total: tooltip("Overall", "Average across all four categories of metrics."),
    },
})
```

<!---
******** END REPO-LEVEL METRICS TABLE ********
--->

<!---
******** START PLOT OF MAINTENANCE DEFICIT OVER DATES ********
--->

## Maintenance deficit

This next graph shows the maintenance deficit over time, as the difference
between community engagement and developer responsiveness. Repositories with
high community engagement yet low developer responsiveness have a high
maintenance deficit, and vice-versa. The "Deficit" scores are scaled to fix
within the same range as the metrics of community engagement and developer
responsiveness.

```{r}
maintenance_ts <- readRDS (fs::path ("data", "results-maintenance-org.Rds")) |>
    dplyr::group_by (date) |>
    dplyr::summarise (
        comm_engage = mean (comm_engage),
        dev_resp = mean (dev_resp),
        maintenance = mean (maintenance)
    )
maintenance_ts$maintenance <- maintenance_ts$maintenance -
    mean (maintenance_ts$maintenance) +
    mean ((maintenance_ts$comm_engage + maintenance_ts$dev_resp) / 2)
maintenance_ts <- maintenance_ts |> tidyr::pivot_longer (-date)
maintenance_ts$name [maintenance_ts$name == "comm_engage"] <- "Comm. Engage."
maintenance_ts$name [maintenance_ts$name == "dev_resp"] <- "Dev. Resp."
maintenance_ts$name [maintenance_ts$name == "maintenance"] <- "Deficit"

ojs_define (maintenance_ts_in = maintenance_ts)
```

```{ojs}
maintenanceData = {
    return transpose(maintenance_ts_in).map(row => ({
        ...row,
        date: new Date(row.date)
    }));
}
```

```{ojs}
Plot.plot({
    color: {
        legend: true,
        label: "name",
        swatchHeight: 4,
        domain: ["Comm. Engage.", "Dev. Resp.", "Deficit"],
    },
    marks: [
        Plot.lineY(maintenanceData, {
            x: "date",
            y: "value",
            stroke: "name",
            strokeWidth:  2,
            strokeDasharray: "2,5",
        }),
        Plot.linearRegressionY(maintenanceData, {
            x: "date",
            y: "value",
            stroke: "name",
            strokeWidth: 2,
            ci: 0
        }),
        Plot.axisY({
            label: null,
        }),
    ],
    x: {
        grid: true,
        type: "utc",
        domain: [d3.min(metricsData, d => d.date), d3.max(metricsData, d => d.date)],
        tickFormat: "%Y",
        ticks: [...new Set(metricsData.map(d => d.date.getFullYear()))].map(year => new Date(`${year}-01-01`)),
    },
    y: { grid: true },
    style: {
        fontSize: '16px',
    }
})
```

And these are maintenance deficit values for individual repositories
(packages), for the latest time period only.

```{r}
maintenance_repo <- readRDS (fs::path ("data", "results-maintenance-org.Rds")) |>
    dplyr::filter (date == max (date)) |>
    dplyr::select (-date) |>
    dplyr::mutate (
        maintenance = maintenance -
            mean (maintenance) + mean (c (comm_engage + dev_resp) / 2)
    ) |>
    dplyr::arrange (dplyr::desc (maintenance))
ojs_define (maintenance_repo_in = maintenance_repo)
```


```{ojs}
maintenanceRepoData = {
    return transpose(maintenance_repo_in).map(row => ({
        ...row,
    }));
}
```

```{ojs}
Inputs.table(maintenanceRepoData, {
    width: {
        package: 100,
        comm_engage: 200,
        dev_resp: 200,
        maintenance: 200,
    },
    format: {
        package: d => pkgfmt(d),
        comm_engage: sparkbar(d3.max(maintenanceRepoData, d => d.comm_engage)),
        dev_resp: sparkbar(d3.max(maintenanceRepoData, d => d.dev_resp)),
        maintenance: sparkbar(d3.max(maintenanceRepoData, d => d.maintenance)),
    },
    header: {
        comm_engage: tooltip("Community Engagement", "Community Engagement metrics"),
        dev_resp: tooltip("Developer Responsivness", "Developer Responsiveness metrics"),
        maintenance: tooltip(
            "Maintenance Deficit",
            "Community Engagment minus Developer Responsivess (rescaled)"
        ),
    },
})
```

---

## Additional metrics and indicators

The following show several more distinct indicators of maintenance need, all of
which are assessed over the most recent period of repository activity:

- _Ctb. Absence_: A measure of "contributor absence" for each repository,
    indicating maintenance deficit arising through absence of primary
    contributors.
- _Resp. Time_: The average time for a core maintainer to respond to a new
    issue or pull request
- _Issue Labels_: The proportion of issues with labels
- _Prop. Bugs_: The proportion of new issues opened that were bug reports

```{r load-table-data}
data_extra_metrics <- readRDS (fs::path ("data", "results-data-ctb-absence.Rds")) |>
    dplyr::filter (what == "absence") |>
    dplyr::group_by (repo) |>
    dplyr::summarise (ctb_absence = max (measure)) |>
    dplyr::full_join (readRDS (fs::path ("data", "results-data-issue-resp.Rds")), by = "repo") |>
    dplyr::full_join (readRDS (fs::path ("data", "results-data-issue-bugs.Rds")), by = "repo")
# data_ctb_abs_ctb <- dplyr::group_by (data_ctb_abs, name) |>
#     dplyr::summarise (measure = mean (measure), n = dplyr::n ())
```

```{r ojs-in-extra-metrics}
ojs_define (data_extra_metrics_in = data_extra_metrics)
```

```{ojs}
extraMetricsTable = {
    return transpose(data_extra_metrics_in).map(row => ({
        ...row,
    }));
}
```

```{ojs}
Inputs.table(extraMetricsTable, {
    width: {
        repo: 100,
        ctb_absence: 200,
        response: 200,
        labels: 200,
        bugs: 200,
    },
    format: {
        repo: d => pkgfmt(d),
        ctb_absence: sparkbar(d3.max(extraMetricsTable, d => d.ctb_absence)),
        response: sparkbar(d3.max(extraMetricsTable, d => d.response)),
        labels: sparkbar(d3.max(extraMetricsTable, d => d.labels)),
        bugs: sparkbar(d3.max(extraMetricsTable, d => d.bugs)),
    },
    header: {
        ctb_absence: tooltip("Ctb. Absence", "Contributor absence factor"),
        response: tooltip("Resp. Time", "Time to respond to GitHub issues and pull requests"),
        labels: tooltip("Issue Labels", "Proportion of labelled issues"),
        bugs: tooltip("Prop. Bugs", "Proportion of issues and PRs which are about bugs."),
    },
})
```

---

### Contributor Absence

Finally, this table shows a metric of main contributor absence. Values are only
and whose absence is equivalent to comp. A contributor who has been entirely
absent during the most recent period, and was responsible for 100% of the
commits within a single repository, would have a contributor absence score of
one. A contributor absence of one could also reflect somebody contributing
exactly 50% of the code to two repositories, and being entirely absent during
the recent period. Any contributions by that contributor during the recent
period would reduce the absence factor. In general, high absence factors
describe recently absent contributors who have previously been major
contributors to numerous repositories.

```{r load-data}
data_ctb_abs_ctb <- readRDS (fs::path ("data", "results-data-ctb-absence.Rds")) |>
    dplyr::filter (what == "absence") |>
    dplyr::group_by (name, login) |>
    dplyr::summarise (measure = sum (measure), .groups = "keep")
# Names and/or logins may be repeated:
dups <- which (duplicated (data_ctb_abs_ctb$login))
if (length (dups) > 0L) {
    dups <- data_ctb_abs_ctb$login [dups]
    names <- vapply (dups, function (d) {
        index <- which (data_ctb_abs_ctb$login == d)
        nms <- data_ctb_abs_ctb$name [index]
        # Pick first name that is the longest and has most white space:
        rank1 <- order (nchar (nms), decreasing = TRUE)
        n_spaces <- vapply (
            gregexpr ("\\s", nms),
            function (s) length (which (s > 0)),
            integer (1L)
        )
        rank2 <- order (n_spaces, decreasing = TRUE)
        rank <- order (rank1 + rank2)
        nms [rank [1L]]
    }, character (1L))
    for (d in seq_along (dups)) {
        index <- which (data_ctb_abs_ctb$login == dups [d])
        data_ctb_abs_ctb$name [index] <- names [d]
    }
    data_ctb_abs_ctb <- data_ctb_abs_ctb |>
        dplyr::group_by (name, login) |>
        dplyr::summarise (measure = sum (measure), .groups = "keep")
}

# Then only include contributors with an absence factor of 1, equivalent to
# complete absence from a single repo:
data_ctb_abs_ctb <- data_ctb_abs_ctb |>
    dplyr::filter (measure >= 1) |>
    dplyr::arrange (dplyr::desc (measure))
```

```{r ojs-in-models}
ojs_define (ctb_abs_ctb_in = data_ctb_abs_ctb)
```

```{ojs plot-latest}
Plot = import("https://esm.sh/@observablehq/plot")
```

```{ojs}
ctb_abs_ctb = {
    return transpose(ctb_abs_ctb_in).map(row => ({
        ...row,
    }));
}
ctb_abs_ctb_len = ctb_abs_ctb.length;
```


```{ojs}
// The 'ctbfmt' function set the localStorage 'orgmetricsMaintainer' value, but
// the inputs here are full names, no GitHub handles, so unless the are
// identical, this currently fails and needs to be fixed.
Inputs.table(ctb_abs_ctb, {
    format: {
        login: d => ctbfmt(d),
        measure: sparkbar(d3.max(ctb_abs_ctb, d => d.measure)),
    },
    header: {
        measure: tooltip("Ctb. Absence", "Contributor absence factor"),
    },
})
```
