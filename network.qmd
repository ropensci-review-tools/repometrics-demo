---
title: "Network"
execute:
  echo: false
format:
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

This page shows an interactive network diagram of "epiverse" packages, intended
to demonstrate possible ways to view relationships between packages. The page
will likely be updated to present two separate network diagrams, one for
relationships between packages, to enable visual identification of the
centrality of individual packages, and one for relationships between people.

In current form, the main functional component is the slider for "*Dependencies
vs Code Similarity". This controls the thickness of lines connecting packages,
with lines only shown for packages which have direct dependencies on one
another.

- For a value of zero, lines directly reflect (relative) numbers of function
calls made from one package (in orange) to another (in blue).
- For a value of one, lines are scaled by how different the code within each
pair of packages is, with thinner lines for more similar packages.

These two kinds of relationships can be taken together to indicate more
important packages as those which are both used by many other packages, and are
notably different from other packages. Thus important relationships are those
for which lines which remain thick regardless of the value selected with this
slider.

---

<div style="margin-top: 20px; margin-bottom: 20px;"></div>

```{r fn-calls-pre-process}
fn_calls <- readRDS (fs::path ("data", "fn-calls.Rds"))

fn_call_nodes_pkg <- fn_calls$summary |>
    dplyr::group_by (package) |>
    dplyr::summarise (num_calls = sum (num_calls), .groups = "keep") |>
    dplyr::rename (id = package) |>
    dplyr::mutate (group = "depends")

fn_call_nodes_src <- fn_calls$summary |>
    dplyr::group_by (source) |>
    dplyr::summarise (num_calls = sum (num_calls), .groups = "keep") |>
    dplyr::rename (id = source) |>
    dplyr::mutate (group = "uses") |>
    dplyr::filter (!id %in% fn_call_nodes_pkg$id)

fn_call_nodes <- dplyr::bind_rows (
    fn_call_nodes_pkg,
    fn_call_nodes_src
)

dat <- readRDS (fs::path ("data", "results-models.Rds"))
all_pkgs <- unique (dat$package)
extra_pkgs <- all_pkgs [which (!all_pkgs %in% fn_call_nodes$id)]
fn_call_nodes <- rbind (
    fn_call_nodes,
    data.frame (id = extra_pkgs, num_calls = 0L, group = "isolated")
)

fn_call_links <- fn_calls$summary |>
    dplyr::select (-num_fns) |>
    dplyr::rename (target = package, value = num_calls)
fn_call_links$type <- "depends"
```

```{r emb-matrix-pre-process}
emb <- readRDS (fs::path ("data", "similarities.Rds"))$code
rownames (emb) <- colnames (emb)
emb_nodes <- rowSums (emb, na.rm = TRUE)
emb_nodes <- data.frame (
    id = names (emb_nodes),
    value = as.numeric (emb_nodes),
    group = "isolated"
)
# Embeddings don't exist for all nodes, so add extra:
nodes_extra <- fn_call_nodes$id [which (!fn_call_nodes$id %in% emb_nodes$id)]
if (length (nodes_extra) > 0L) {
    emb_nodes <- rbind (emb_nodes, data.frame (id = nodes_extra, value = 0, group = "isolated"))
    index <- match (fn_call_nodes$id, emb_nodes$id)
    emb_nodes$group [index] <- fn_call_nodes$group
}

emb_nodes$group <- "depends"

emb_df <- cbind (package = rownames (emb), data.frame (emb, row.names = NULL))
emb_links <- emb_df |>
    tidyr::pivot_longer (-"package") |>
    dplyr::rename (source = package, target = name) |>
    dplyr::filter (!is.na (value)) |>
    dplyr::mutate (type = "depends", value = 10 * value) |>
    dplyr::filter (target %in% emb_nodes$id)
```


```{r ojs-definitions}
ojs_define (nodes_in = fn_call_nodes)
ojs_define (links_in = fn_call_links)
ojs_define (nodes_in_emb = emb_nodes)
ojs_define (links_in_emb = emb_links)
```

```{ojs transform}
nodesAll = {
    return transpose(nodes_in).map(row => ({
        ...row,
    }));
}
linksAll = {
    return transpose(links_in).map(row => ({
        ...row,
    }));
}
nodesAllEmb = {
    return transpose(nodes_in_emb).map(row => ({
        ...row,
    }));
}
linksAllEmb = {
    return transpose(links_in_emb).map(row => ({
        ...row,
    }));
}
```


<div style="margin-top: 20px; margin-bottom: 20px;"></div>

```{ojs strength-slider}
viewof strength = Inputs.range(
    [-2000,0],
    {value: -400, step: 100, label: htl.html`<b>Force Strength:</b>`}
);
```

```{ojs line-width-slider}
viewof linewidth = Inputs.range(
    [1,10],
    {value: 1, step: 1, label: htl.html`<b>Line Thickness:</b>`}
);
```

```{ojs emb-vs-deps-slider}
viewof deps_vs_emb = Inputs.range(
    [0, 1],
    {value: 0, step: 0.1, label: htl.html`<b>Dependencies (0) vs Code Similarity (1):</b>`}
);
```

<div style="margin-top: 20px; margin-bottom: 20px;"></div>

```{ojs org-selector}
node_types = ["depends", "uses", "isolated"]
viewof typeSelection = {
    const input =  Inputs.checkbox(
        node_types,
        {
            value: ["depends", "uses"],
            label: htl.html`<b>Node types:</b>`,
        }
    );

    // Modification ideas from
    // https://talk.observablehq.com/t/what-is-the-best-way-to-style-an-input-checkbox/7690/2
    const scope = DOM.uid().id;
    input.classList.add(scope);

    input.append(htl.html`<style>
    .${scope} > div, .${scope} > div label { display: flex; flex-wrap: wrap; gap: 10px; width: 300px }
    `)

    return input;
}
```
<div style="margin-top: 20px; margin-bottom: 20px;"></div>


```{ojs swatches}
import {Swatches} from "@d3/color-legend"
Swatches(chart.scales.color)
```

```{ojs ForceGraph-plot}
chart = {

  const width = 928;
  const height = 600;

  // linksAll has fewer (source, target) pairs than linksAllEmb, so create a
  // lookup table of those pairs which do exist:
  const linksAllEmbLookup = {};
  linksAllEmb.forEach(obj => {
    linksAllEmbLookup[`${obj.source},${obj.target}`] = obj.value;
  });

  // Then loop over all linksAllEmb, and add values for linksAll where they
  // exist for same (source, target) pair. Note that obj1.value is embedding
  // strength, while linksAllLookup holds dependency strength
  const linksCombined = linksAll.map(obj => {
      const key = `${obj.source},${obj.target}`;
      return {
          ...obj,
          value: linksAllEmbLookup[key] ?
            (1. - deps_vs_emb) * obj.value + deps_vs_emb * linksAllEmbLookup[key] : obj.value
      };
  });

  // const nodes = nodesAllEmb.filter(function(node) {
  //   return typeSelection.includes(node.group) || node.group.length === 0
  // })
  const nodes = nodesAll.filter(function(node) {
    return typeSelection.includes(node.group) || node.group.length === 0
  })
  const links = linksCombined.filter(function(link) {
    return typeSelection.includes(link.type) || link.type.length === 0
  })
  // const links = linksCombined.filter(function(link) {
  //   return typeSelection.includes(link.type) || link.type.length === 0
  // })

  const types = Array.from(new Set(nodes.map(d => d.group)));

  const color = d3.scaleOrdinal(types, d3.schemeCategory10);

  const simulation = d3.forceSimulation(nodes)
      .force("link", d3.forceLink(links).id(d => d.id))
      .force("charge", d3.forceManyBody().strength(strength))
      .force("x", d3.forceX())
      .force("y", d3.forceY());

  const svg = d3.create("svg")
      .attr("viewBox", [-width / 2, -height / 2, width, height])
      .attr("width", width)
      .attr("height", height)
      .attr("style", "max-width: 100%; height: auto; font: 14px sans-serif;");

  // Per-type markers, as they don't inherit styles.
  svg.append("defs").selectAll("marker")
    .data(types)
    .join("marker")
      .attr("id", d => `arrow-${d}`)
      .attr("viewBox", "0 -5 10 10")
      .attr("refX", 15)
      .attr("refY", -0.5)
      .attr("markerWidth", 6)
      .attr("markerHeight", 6)
      .attr("orient", "auto")
    .append("path")
      .attr("fill", color)
      .attr("d", "M0,-5L10,0L0,5");

  const link = svg.append("g")
      .attr("fill", "none")
      .attr("stroke-width", 1.5)
    .selectAll("path")
    .data(links)
    .join("path")
      .attr("stroke", d => color(d.type))
      .attr("stroke-width", d => d.value * linewidth);

  const node = svg.append("g")
    .selectAll("g")
    .data(nodes)
    .join("g")
      .call(drag(simulation));

  node.append("circle")
      .attr("stroke", "white")
      .attr("stroke-width", 1.5)
      .data(nodes)
      .join("circle")
        .attr("fill", d => color(d.group))
        .attr("r", d => 10 * Math.log10(d.num_calls + 1));

  node.append("text")
      .attr("x", 8)
      .attr("y", "0.31em")
      .text(d => d.id)
      .html(d => `<a href="https://github.com/${d.id}" style="text-decoration:none" target="_blank">${d.id}</a>`)
    .clone(true).lower()
      .attr("fill", "none")
      .attr("stroke", "white")
      .attr("stroke-width", 3);

  simulation.on("tick", () => {
    link.attr("d", linkArc);
    node.attr("transform", d => `translate(${d.x},${d.y})`);
  });

  invalidation.then(() => simulation.stop());

  return Object.assign(svg.node(), {scales: {color}});
}
```

```{ojs}
function linkArc(d) {
  const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);
  return `
    M${d.source.x},${d.source.y}
    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}
  `;
}
```

```{ojs}
drag = simulation => {

  function dragstarted(event, d) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(event, d) {
    d.fx = event.x;
    d.fy = event.y;
  }

  function dragended(event, d) {
    if (!event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }

  return d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended);
}
```
