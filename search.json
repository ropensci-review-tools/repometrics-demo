[
  {
    "objectID": "network.html",
    "href": "network.html",
    "title": "Network",
    "section": "",
    "text": "This page shows an interactive network diagram of “epiverse” packages.\n\nnodesAll = {\n    return transpose(nodes_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nlinksAll = {\n    return transpose(links_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nnodesAllEmb = {\n    return transpose(nodes_in_emb).map(row =&gt; ({\n        ...row,\n    }));\n}\nlinksAllEmb = {\n    return transpose(links_in_emb).map(row =&gt; ({\n        ...row,\n    }));\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof strength = Inputs.range(\n    [-2000,0],\n    {value: -400, step: 100, label: htl.html`&lt;b&gt;Force Strength:&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\nviewof linewidth = Inputs.range(\n    [1,10],\n    {value: 1, step: 1, label: htl.html`&lt;b&gt;Line Thickness:&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\nviewof deps_vs_emb = Inputs.range(\n    [0, 1],\n    {value: 0, step: 0.1, label: htl.html`&lt;b&gt;Dependencies (0) vs Code Similarity (1):&lt;/b&gt;`}\n);\n\n\n\n\n\n\n\n\n\n\nnode_types = [\"depends\", \"uses\", \"isolated\"]\nviewof typeSelection = {\n    const input =  Inputs.checkbox(\n        node_types,\n        {\n            value: [\"depends\", \"uses\"],\n            label: htl.html`&lt;b&gt;Node types:&lt;/b&gt;`,\n        }\n    );\n\n    // Modification ideas from\n    // https://talk.observablehq.com/t/what-is-the-best-way-to-style-an-input-checkbox/7690/2\n    const scope = DOM.uid().id;\n    input.classList.add(scope);\n\n    input.append(htl.html`&lt;style&gt;\n    .${scope} &gt; div, .${scope} &gt; div label { display: flex; flex-wrap: wrap; gap: 10px; width: 300px }\n    `)\n\n    return input;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {Swatches} from \"@d3/color-legend\"\nSwatches(chart.scales.color)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchart = {\n\n  const width = 928;\n  const height = 600;\n\n  // linksAll has fewer (source, target) pairs than linksAllEmb, so create a\n  // lookup table of those pairs which do exist:\n  const linksAllEmbLookup = {};\n  linksAllEmb.forEach(obj =&gt; {\n    linksAllEmbLookup[`${obj.source},${obj.target}`] = obj.value;\n  });\n\n  // Then loop over all linksAllEmb, and add values for linksAll where they\n  // exist for same (source, target) pair. Note that obj1.value is embedding\n  // strength, while linksAllLookup holds dependency strength\n  const linksCombined = linksAll.map(obj =&gt; {\n      const key = `${obj.source},${obj.target}`;\n      return {\n          ...obj,\n          value: linksAllEmbLookup[key] ?\n            (1. - deps_vs_emb) * obj.value + deps_vs_emb * linksAllEmbLookup[key] : obj.value\n      };\n  });\n\n  // const nodes = nodesAllEmb.filter(function(node) {\n  //   return typeSelection.includes(node.group) || node.group.length === 0\n  // })\n  const nodes = nodesAll.filter(function(node) {\n    return typeSelection.includes(node.group) || node.group.length === 0\n  })\n  const links = linksCombined.filter(function(link) {\n    return typeSelection.includes(link.type) || link.type.length === 0\n  })\n  // const links = linksCombined.filter(function(link) {\n  //   return typeSelection.includes(link.type) || link.type.length === 0\n  // })\n\n  const types = Array.from(new Set(nodes.map(d =&gt; d.group)));\n\n  const color = d3.scaleOrdinal(types, d3.schemeCategory10);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(links).id(d =&gt; d.id))\n      .force(\"charge\", d3.forceManyBody().strength(strength))\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY());\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"style\", \"max-width: 100%; height: auto; font: 14px sans-serif;\");\n\n  // Per-type markers, as they don't inherit styles.\n  svg.append(\"defs\").selectAll(\"marker\")\n    .data(types)\n    .join(\"marker\")\n      .attr(\"id\", d =&gt; `arrow-${d}`)\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 15)\n      .attr(\"refY\", -0.5)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n    .append(\"path\")\n      .attr(\"fill\", color)\n      .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n  const link = svg.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke-width\", 1.5)\n    .selectAll(\"path\")\n    .data(links)\n    .join(\"path\")\n      .attr(\"stroke\", d =&gt; color(d.type))\n      .attr(\"stroke-width\", d =&gt; d.value * linewidth);\n\n  const node = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(nodes)\n    .join(\"g\")\n      .call(drag(simulation));\n\n  node.append(\"circle\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 1.5)\n      .data(nodes)\n      .join(\"circle\")\n        .attr(\"fill\", d =&gt; color(d.group))\n        .attr(\"r\", d =&gt; 10 * Math.log10(d.num_calls + 1));\n\n  node.append(\"text\")\n      .attr(\"x\", 8)\n      .attr(\"y\", \"0.31em\")\n      .text(d =&gt; d.id)\n      .html(d =&gt; `&lt;a href=\"https://github.com/${d.id}\" style=\"text-decoration:none\" target=\"_blank\"&gt;${d.id}&lt;/a&gt;`)\n    .clone(true).lower()\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 3);\n\n  simulation.on(\"tick\", () =&gt; {\n    link.attr(\"d\", linkArc);\n    node.attr(\"transform\", d =&gt; `translate(${d.x},${d.y})`);\n  });\n\n  invalidation.then(() =&gt; simulation.stop());\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\n\n\n\n\n\n\nfunction linkArc(d) {\n  const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);\n  return `\n    M${d.source.x},${d.source.y}\n    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}\n  `;\n}\n\n\n\n\n\n\n\ndrag = simulation =&gt; {\n\n  function dragstarted(event, d) {\n    if (!event.active) simulation.alphaTarget(0.3).restart();\n    d.fx = d.x;\n    d.fy = d.y;\n  }\n\n  function dragged(event, d) {\n    d.fx = event.x;\n    d.fy = event.y;\n  }\n\n  function dragended(event, d) {\n    if (!event.active) simulation.alphaTarget(0);\n    d.fx = null;\n    d.fy = null;\n  }\n\n  return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n}"
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "Community Health",
    "section": "",
    "text": "This page summarises scores for the various CHAOSS (Community Health Analytics in Open Source Software) models for each repository. The CHAOSS project has developed a large range of individual metrics of community health. These metrics are aggregated into conceptual models which aim to synthesise prominent aspects of community health. This page provides insights into a range of those models, assessed for each repository in the epiverse-trace and reconhub GitHub organizations."
  },
  {
    "objectID": "models.html#aggregate-community-health",
    "href": "models.html#aggregate-community-health",
    "title": "Community Health",
    "section": "Aggregate Community Health",
    "text": "Aggregate Community Health\nThis page shows aggregate community health scores for all repositories within the reconhub and epiverse-trace organizations. Higher values describe repositories with greater community health scores. Values for individual models are standardised across all repositories to have mean values of zero and standard deviations of one. These results are aggregated across thirteen distinct models, leading to maximal aggregated values slightly exceeding that value.\n\nmodels_all = {\n    return transpose(models_in).map(row =&gt; ({\n        ...row,\n    }));\n}\nmodels_final = models_all.filter(function(mod) {\n    return mod.name.includes(\"final\")\n})\nmodels_len = models_final.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models_final, {\n            y: \"package\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(models_final,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models_final, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "models.html#individual-models-of-community-health",
    "href": "models.html#individual-models-of-community-health",
    "title": "Community Health",
    "section": "Individual models of community health",
    "text": "Individual models of community health\nThe following section shows values for each individual model of community health for all repositories.\n\ncommHealthVars = [\n    \"collab_devel_index\",\n    \"comm_serv_support\",\n    \"comm_welcoming\",\n    \"community_activity\",\n    \"dev_responsiveness\",\n    \"oss_compliance\",\n    \"proj_awareness\",\n    \"proj_engagement\",\n    \"starter_health\",\n    \"viability_community\",\n    \"viability_gov\",\n    \"viability_starter\",\n    \"viability_strategy\"\n]\nviewof commHealthVar = Inputs.select(\n    commHealthVars,\n    { multiple: \"false\", label: \"Community Health Variable\" }\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodels_filtered = models_all.filter(function(mod) {\n    return mod.name.includes(commHealthVar)\n})\n\n\n\n\n\n\n\nPlot.plot({\n    height: 20 * models_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(models_filtered, {\n            y: \"package\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(models_filtered,\n            Plot.pointer(\n            {\n                y: \"package\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(models_filtered, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"package\",\n            text: \"package\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "models.html#community-health-for-individual-repositories",
    "href": "models.html#community-health-for-individual-repositories",
    "title": "Community Health",
    "section": "Community health for individual repositories",
    "text": "Community health for individual repositories\nThe following section shows all models of community health for a selected repository.\n\nreposAll = models_all.map(function(item) {\n    return item.package;\n});\nrepos = Array.from(new Set(reposAll));\nviewof repo = Inputs.select(repos, {multiple: false, label: \"Repository:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel_repo = models_all.filter(function(mod) {\n    return mod.package.includes(repo) && mod.name !== \"final\"\n})\nmodel_repo_len = model_repo.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n    height: 40 * model_repo_len,\n    marginLeft: 60,\n    marginRight: 160,\n    marginTop: 50,\n    marginBottom: 50,\n    axis: null,\n    x: {\n        axis: \"top\",\n        grid: true,\n        label: \"Community Health\"\n    },\n    y: { grid: true },\n    marks: [\n        Plot.barX(model_repo, {\n            y: \"name\",\n            x: \"value\",\n            sort: {y: \"-x\" },\n            fill: \"value\",\n        }),\n        Plot.barX(model_repo,\n            Plot.pointer(\n            {\n                y: \"name\",\n                x: \"value\",\n                sort: {y: \"-x\" },\n                stroke: \"gray\",\n                fill: \"value\",\n                strokeWidth: 2,\n            })\n        ),\n        Plot.text(model_repo, {\n            x: (d) =&gt; d.value &lt; 0 ? 0 : d.value,\n            y: \"name\",\n            text: \"name\",\n            textAnchor: \"start\",\n            fontSize: 16,\n            dx: 5\n        })\n    ],\n    color: {\n        scheme: \"Cool\",\n        type: \"ordinal\"\n    }\n})"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Organization-level Metrics and Models",
    "section": "",
    "text": "This dashboard presents metrics and models for each repository within both the epiverse-trace and reconhub GitHub organizations. The dashboard currently has two main pages:\n\nCommunity Models summarising scores for the various CHAOSS (Community Health Analytics in Open Source Software) models for each repository.\nA network diagram of strengths of relationship between each repository."
  }
]